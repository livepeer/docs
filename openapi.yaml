openapi: 3.1.0
info:
  title: Livepeer API Reference
  description: |
    Welcome to the Livepeer API reference docs. Here you will find all the
    endpoints exposed on the standard Livepeer API, learn how to use them and
    what they return.
  version: 1.0.0
servers:
  - url: "https://livepeer.studio/api"

security:
  - apiKey: []

tags:
  - name: stream
  - name: multistream-target
  - name: webhook
  - name: asset
  - name: metrics
  - name: room
  - name: session
  - name: access-control
  - name: task
  - name: playback
  - name: transcode

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: Bearer api-key
  schemas:
    ffmpeg-profile:
      type: object
      description: LMPS ffmpeg profile
      additionalProperties: false
      required:
        - width
        - name
        - height
        - bitrate
        - fps
      properties:
        width:
          type: integer
          minimum: 128
          example: 1280
        name:
          type: string
          minLength: 1
          maxLength: 500
          example: 720p
        height:
          type: integer
          minimum: 128
          example: 720
        bitrate:
          type: integer
          minimum: 400
          example: 4000
        fps:
          type: integer
          minimum: 0
          example: 30
        fpsDen:
          type: integer
          minimum: 1
          example: 1
        gop:
          type: string
          example: "60"
        profile:
          type: string
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
          example: H264High
        encoder:
          type: string
          enum:
            - h264
            - hevc
            - vp8
            - vp9
          example: h264
    webhook:
      type: object
      required:
        - name
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
          example: "My webhook"
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
        events:
          type: array
          items:
            type: string
            enum:
              - stream.started
              - stream.detection
              - stream.idle
              - recording.ready
              - recording.started
              - recording.waiting
              - multistream.connected
              - multistream.error
              - multistream.disconnected
              - playback.user.new
              - playback.accessControl
              - asset.created
              - asset.updated
              - asset.failed
              - asset.ready
              - asset.deleted
              - task.spawned
              - task.updated
              - task.completed
              - task.failed
          example:
            - stream.started
            - recording.ready
        url:
          type: string
          format: uri
          pattern: "^http(s)?://"
          example: "https://webhook.example.com"
        sharedSecret:
          type: string
          writeOnly: true
          description: shared secret used to sign the webhook payload
          example: "mySharedSecret"
        streamId:
          type: string
          description: streamId of the stream on which the webhook is applied
          example: "de7818e7-610a-4057-8f6f-b785dc1e6f88"
        status:
          type: object
          readOnly: true
          description: status of webhook
          properties:
            lastFailure:
              type: object
              readOnly: true
              description: failure timestamp and error message with status code
              properties:
                timestamp:
                  type: number
                  readOnly: true
                  example: 1587667174725
                  description:
                    Timestamp (in milliseconds) at which the webhook last failed
                error:
                  readOnly: true
                  type: string
                  description: Webhook failure error message
                  example: Error message
                response:
                  readOnly: true
                  type: string
                  description: Webhook failure response
                  example: Response body
                statusCode:
                  readOnly: true
                  type: number
                  description: Webhook failure status code
                  example: 500
            lastTriggeredAt:
              type: number
              description: |
                Timestamp (in milliseconds) at which the webhook last was
                triggered
              example: 1587667174725
          example:
            lastFailure:
              timestamp: 1587667174725
              error: Error message
              response: Response body
              statusCode: 500
            lastTriggeredAt: 1587667174725
    stream:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
          example: test_stream
        creatorId:
          $ref: "#/components/schemas/creator-id"
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        isActive:
          type: boolean
          description: If currently active
        isHealthy:
          $ref: "#/components/schemas/stream-health-payload/properties/is_healthy"
        issues:
          $ref: "#/components/schemas/stream-health-payload/properties/human_issues"
        createdByTokenName:
          type: string
          readOnly: true
          description: Name of the token used to create this object
          example: "staging key"
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which the stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to the parent stream object
        streamKey:
          type: string
          example: hgebdhhigq
          description: Used to form the RTMP ingest URL
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          type: array
          default:
            - name: 240p0
              fps: 0
              bitrate: 250000
              width: 426
              height: 240
            - name: 360p0
              fps: 0
              bitrate: 800000
              width: 640
              height: 360
            - name: 480p0
              fps: 0
              bitrate: 1600000
              width: 854
              height: 480
            - name: 720p0
              fps: 0
              bitrate: 3000000
              width: 1280
              height: 720
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
          example:
            - name: 720p
              width: 1280
              height: 720
              bitrate: 3000
              fps: 30
        record:
          description: |
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        multistream:
          type: object
          additionalProperties: false
          properties:
            targets:
              type: array
              example:
                - id: PUSH123
                  profile: 720p
              description: |
                References to targets where this stream will be simultaneously
                streamed to
              items:
                type: object
                required:
                  - profile
                additionalProperties: false
                properties:
                  profile:
                    type: string
                    description: |
                      Name of the transcoding profile that should be sent. Use
                      "source" for pushing the source stream data
                    minLength: 1
                    maxLength: 500
                    example: 720p
                  videoOnly:
                    type: boolean
                    description: |
                      If true, the stream audio will be muted, and only silent
                      video will be pushed to the target.
                    default: false
                  id:
                    type: string
                    description:
                      ID of the multistream target object where to push this
                      stream
                  spec:
                    type: object
                    writeOnly: true
                    description: |
                      Inline multistream target object. Will automatically
                      create the target resource to be used by the created stream.
                    required:
                      - url
                    additionalProperties: false
                    properties:
                      name:
                        type: string
                      url:
                        $ref: "#/components/schemas/multistream-target/properties/url"
        suspended:
          type: boolean
          description: If currently suspended
    new-stream-payload:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          $ref: "#/components/schemas/stream/properties/name"
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        profiles:
          $ref: "#/components/schemas/stream/properties/profiles"
        record:
          $ref: "#/components/schemas/stream/properties/record"
        multistream:
          $ref: "#/components/schemas/stream/properties/multistream"
    stream-patch-payload:
      type: object
      additionalProperties: false
      properties:
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        record:
          $ref: "#/components/schemas/stream/properties/record"
        suspended:
          $ref: "#/components/schemas/stream/properties/suspended"
        multistream:
          $ref: "#/components/schemas/stream/properties/multistream"
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
    stream-health-payload:
      type: object
      description: |
        Payload received from Catalyst about the health of livestreams currently
        or recently active on Mist.
      required:
        - stream_name
        - is_active
        - is_healthy
      properties:
        stream_name:
          type: string
          description: |
            The name of the stream within Catalyst/Mist, normally comprised of
            the base stream name with the playback ID after the + sign.
          example: videorec+eaw4nk06ts2d0mzb
        session_id:
          description: |
            The unique identifier for the specific session, created by Mist and
            used for creating the session object in the DB.
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        is_active:
          type: boolean
          description: Indicates whether the stream is currently live or not.
          example: true
        is_healthy:
          type: boolean
          description: Indicates whether the stream is healthy or not.
          example: true
        issues:
          type: string
          description: |
            Raw issues affecting the stream as described by Mist, if any. We
            don't expose those to the end-user, showing only human_issues
            instead.
          example: "Stream buffering"
        human_issues:
          type: array
          description: |
            A string array of human-readable errors describing issues affecting
            the stream, if any.
          items:
            type: string
          example:
            - "Buffer underflow"
            - "Network congestion"
        tracks:
          type: object
          description: |
            A map of track objects containing information about the stream's
            tracks. The keys are the unique track ID from Mist.
          additionalProperties:
            type: object
            properties:
              codec:
                type: string
                description: The codec being used for the track.
                example: "H.264"
              kbits:
                type: number
                description: "The bitrate of the track, in kilobits per second."
                example: 2500
              keys:
                type: object
                description:
                  An object containing additional track-specific metrics.
                additionalProperties:
                  type: number
                  example:
                    key1: 10
                    key2: 20
              fpks:
                type: number
                description: |
                  The framerate of the track, in frames per thousand seconds
                  (kilo-second).
                example: 30
              height:
                type: number
                description: The height of the track's video resolution.
                example: 720
              width:
                type: number
                description: The width of the track's video resolution.
                example: 1280
        extra:
          type: object
          description: |
            An object containing any additional fields sent by Mist in the
            health (STREAM_BUFFER) payload.
          additionalProperties: true
    multistream-target-patch-payload:
      $ref: "#/components/schemas/multistream-target"
    session:
      type: object
      required:
        - name
        - streamId
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
        name:
          type: string
          example: test_session
        lastSeen:
          type: number
          example: 1587667174725
        sourceSegments:
          type: number
          example: 1
        transcodedSegments:
          type: number
          example: 2
        sourceSegmentsDuration:
          type: number
          example: 1
          description: "Duration of all the source segments, sec"
        transcodedSegmentsDuration:
          type: number
          example: 2
          description: "Duration of all the transcoded segments, sec"
        sourceBytes:
          type: number
          example: 1
        transcodedBytes:
          type: number
          example: 2
        ingestRate:
          type: number
          example: 1
          description: Rate at which sourceBytes increases (bytes/second)
        outgoingRate:
          type: number
          example: 2
          description: Rate at which transcodedBytes increases (bytes/second)
        isHealthy:
          $ref: "#/components/schemas/stream-health-payload/properties/is_healthy"
        issues:
          $ref: "#/components/schemas/stream-health-payload/properties/human_issues"
        createdAt:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which the stream object was created
          example: 1587667174725
        parentId:
          type: string
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          description: Points to the parent stream object
        record:
          description: |
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          type: boolean
          example: false
        recordingStatus:
          readOnly: true
          type: string
          description: Status of the recording process of this stream session.
          enum:
            - waiting
            - ready
            - none
        recordingUrl:
          type: string
          readOnly: true
          description: URL for accessing the recording of this stream session.
          example: https://lp-playback.com/hls/29eb9byolvwdbkue/index.m3u8
        mp4Url:
          type: string
          readOnly: true
          description: URL for the stream session recording packaged in an mp4.
          example: https://lp-playback.com/hls/29eb9byolvwdqkue/720.mp4
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form the playback URL
        profiles:
          type: array
          items:
            $ref: "#/components/schemas/ffmpeg-profile"
          example:
            - name: 720p
              width: 1280
              height: 720
              bitrate: 3000
              fps: 30
    error:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          minItems: 1
          items:
            type: string
          example:
            - "id not provided"
            - "user not found"
    multistream-target:
      type: object
      required:
        - url
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        name:
          type: string
          example: My Multistream Target
        url:
          type: string
          writeOnly: true
          description:
            Livepeer-compatible multistream target URL (RTMP(S) or SRT)
          example: "rtmps://live.my-service.tv/channel/secretKey"
          format: uri
          pattern: "^(srt|rtmps?)://"
        disabled:
          type: boolean
          description: |
            If true then this multistream target will not be used for pushing
            even if it is configured in a stream object.
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which multistream target object was
            created
          example: 1587667174725
    asset:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - source
      properties:
        id:
          type: string
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        type:
          type: string
          enum:
            - video
            - audio
          description: Type of the asset.
          example: video
        playbackId:
          type: string
          example: eaw4nk06ts2d0mzb
          description: Used to form playback URL and storage folder
        staticMp4:
          type: boolean
          writeOnly: true
          description: Whether to generate MP4s for the asset.
        playbackUrl:
          readOnly: true
          type: string
          example: >-
            https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8
          description: URL for HLS playback
        downloadUrl:
          readOnly: true
          type: string
          example: "https://livepeercdn.com/asset/eaw4nk06ts2d0mzb/video"
          description: URL to manually download the asset if desired
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        source:
          oneOf:
            - additionalProperties: false
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum:
                    - url
                url:
                  type: string
                  description: URL from which the asset was uploaded
                gatewayUrl:
                  type: string
                  description:
                    Gateway URL from asset if parsed from provided URL on
                    upload.
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
            - additionalProperties: false
              required:
                - type
                - sessionId
              properties:
                type:
                  type: string
                  enum:
                    - recording
                sessionId:
                  type: string
                  description:
                    ID of the session from which this asset was created
            - additionalProperties: false
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - directUpload
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
          example:
            type: url
            url: https://example.com/video.mp4
            gatewayUrl: https://example.com/video.mp4
        creatorId:
          $ref: "#/components/schemas/creator-id"
        storage:
          additionalProperties: false
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                spec:
                  type: object
                  additionalProperties: false
                  default: {}
                  properties:
                    nftMetadataTemplate:
                      type: string
                      enum:
                        - file
                        - player
                      default: file
                      description: |
                        Name of the NFT metadata template to export. 'player'
                        will embed the Livepeer Player on the NFT while 'file'
                        will reference only the immutable MP4 files.
                    nftMetadata:
                      type: object
                      description: |
                        Additional data to add to the NFT metadata exported to
                        IPFS. Will be deep merged with the default metadata
                        exported.
                cid:
                  $ref: "#/components/schemas/ipfs-file-info/properties/cid"
                url:
                  $ref: "#/components/schemas/ipfs-file-info/properties/url"
                gatewayUrl:
                  $ref: "#/components/schemas/ipfs-file-info/properties/gatewayUrl"
                nftMetadata:
                  $ref: "#/components/schemas/ipfs-file-info"
                updatedAt:
                  readOnly: true
                  type: number
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was
                    updated
                  example: 1587667174725
            status:
              $ref: "#/components/schemas/storage-status"
          example:
            ipfs:
              spec:
                nftMetadataTemplate: file
                nftMetadata:
                  name: My NFT
                  description: My NFT description
        status:
          readOnly: true
          type: object
          additionalProperties: false
          required:
            - phase
            - updatedAt
          description: Status of the asset
          properties:
            phase:
              type: string
              description: Phase of the asset
              enum:
                - uploading
                - waiting
                - processing
                - ready
                - failed
            updatedAt:
              type: number
              description:
                Timestamp (in milliseconds) at which the asset was last updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task creating this asset.
            errorMessage:
              type: string
              description: Error message if the asset creation failed.
          example:
            phase: ready
            updatedAt: 1587667174725
            progress: 100
        name:
          type: string
          description: |
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        createdAt:
          readOnly: true
          type: number
          description: Timestamp (in milliseconds) at which asset was created
          example: 1587667174725
        size:
          readOnly: true
          type: number
          description: Size of the asset in bytes
          example: 84934509
        hash:
          type: array
          description: Hash of the asset
          items:
            type: object
            additionalProperties: false
            properties:
              hash:
                type: string
                description: Hash of the asset
                example: >-
                  9b560b28b85378a5004117539196ab24e21bbd75b0e9eb1a8bc7c5fd80dc5b57
              algorithm:
                type: string
                description: Hash algorithm used to compute the hash
                example: sha256
          example:
            - hash: >-
                9b560b28b85378a5004117539196ab24e21bbd75b0e9eb1a8bc7c5fd80dc5b57
              algorithm: sha256
        videoSpec:
          readOnly: true
          type: object
          additionalProperties: false
          description: Video metadata
          properties:
            format:
              type: string
              description: Format of the asset
              example: mp4
            duration:
              type: number
              description: Duration of the asset in seconds (float)
              example: 23.8328
            bitrate:
              type: number
              description: Bitrate of the video in bits per second
              example: 1000000
            tracks:
              type: array
              description: |
                List of tracks associated with the asset when the format
                contemplates them (e.g. mp4)
              items:
                type: object
                additionalProperties: false
                required:
                  - type
                  - codec
                properties:
                  type:
                    type: string
                    description: type of track
                    enum:
                      - video
                      - audio
                    example: video
                  codec:
                    type: string
                    description: Codec of the track
                    example: aac
                  startTime:
                    type: number
                    description: Start time of the track in seconds
                    example: 23.8238
                  duration:
                    type: number
                    description: Duration of the track in seconds
                    example: 23.8238
                  bitrate:
                    type: number
                    description: Bitrate of the track in bits per second
                    example: 1000000
                  width:
                    type: number
                    description: Width of the track - only for video tracks
                    example: 1920
                  height:
                    type: number
                    description: Height of the track - only for video tracks
                    example: 1080
                  pixelFormat:
                    type: string
                    description:
                      Pixel format of the track - only for video tracks
                    example: yuv420p
                  fps:
                    type: number
                    description: Frame rate of the track - only for video tracks
                    example: 30
                  channels:
                    type: number
                    description: Amount of audio channels in the track
                    example: 2
                  sampleRate:
                    type: number
                    description: |
                      Sample rate of the track in samples per second - only for
                      audio tracks
                    example: 44100
                  bitDepth:
                    type: number
                    description: Bit depth of the track - only for audio tracks
                    example: 16
          example:
            format: mp4
            duration: 23.8328
            bitrate: 1000000
            tracks:
              - type: video
                codec: h264
                startTime: 0
                duration: 23.8328
                bitrate: 1000000
                width: 1920
                height: 1080
                pixelFormat: yuv420p
                fps: 30
              - type: audio
                codec: aac
                startTime: 0
                duration: 23.8328
                bitrate: 1000000
                channels: 2
                sampleRate: 44100
                bitDepth: 16
    ipfs-file-info:
      type: object
      required:
        - cid
      additionalProperties: false
      properties:
        cid:
          type: string
          description: CID of the file on IPFS
          example: bafybeihoqtemwitqajy6d654tmghqqvxmzgblddj2egst6yilplr5num6u
        url:
          readOnly: true
          type: string
          description: URL with IPFS scheme for the file
          example: ipfs://bafybeihoqtemwitqajy6d654tmghqqvxmzgblddj2egst6yilplr5num6u
        gatewayUrl:
          readOnly: true
          type: string
          description: URL to access file via HTTP through an IPFS gateway
          example: https://ipfs.io
    signing-key-response-payload:
      type: object
      required:
        - publicKey
        - privateKey
      properties:
        id:
          $ref: "#/components/schemas/signing-key/properties/id"
        name:
          $ref: "#/components/schemas/signing-key/properties/name"
        createdAt:
          $ref: "#/components/schemas/signing-key/properties/createdAt"
        lastSeen:
          $ref: "#/components/schemas/signing-key/properties/lastSeen"
        publicKey:
          $ref: "#/components/schemas/signing-key/properties/publicKey"
        disabled:
          $ref: "#/components/schemas/signing-key/properties/disabled"
        privateKey:
          type: string
          example: "LS0tLS1CRUdJTiBQUklWQVRFIBtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ1RDRzhRWDZKdkR0eC95ZDMKdlpkUHJKR25LcjhiWHRsdXNIL2FOYW5XdHEraFJBTkNBQVE0QnZ6ODI2L2lDaXV1U0NiZVkwc3FmOXljYWh0OApDRFYyUFF2bDFVM1FLSVRBcWRpaktLa0FSUFVkcWRrYWZzR21PMzBDeElPaDBLNWJSQW5XQzd4KwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
    new-asset-payload:
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          description: |
            Name of the asset. This is not necessarily the filename, can be a
            custom name or title
          example: filename.mp4
        staticMp4:
          type: boolean
          description: Whether to generate MP4s for the asset.
          example: true
        playbackPolicy:
          $ref: "#/components/schemas/playback-policy"
        creatorId:
          $ref: "#/components/schemas/input-creator-id"
        storage:
          additionalProperties: false
          properties:
            ipfs:
              description: |
                Set to true to make default export to IPFS. To customize the
                pinned files, specify an object with a spec field. False or null
                means to unpin from IPFS, but it's unsupported right now.
              oneOf:
                - type: object
                  additionalProperties: false
                  properties:
                    spec:
                      oneOf:
                        - type: "null"
                        - $ref: >-
                            #/components/schemas/asset/properties/storage/properties/ipfs/properties/spec
                - type: boolean
                - type: "null"
          example:
            ipfs: true
        url:
          type: string
          format: uri
          pattern: "^(https?|ipfs|ar)://"
          description: |
            URL where the asset contents can be retrieved. Only allowed (and
            also required) in the upload asset via URL endpoint.
          example: "https://s3.amazonaws.com/my-bucket/path/filename.mp4"
        encryption:
          type: object
          additionalProperties: false
          required:
            - encryptedKey
          properties:
            encryptedKey:
              type: string
              writeOnly: true
              description: >-
                Encryption key used to encrypt the asset. Only writable in the
                upload asset endpoints and cannot be retrieved back.
          example:
            encryptedKey: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ1RDRzhRWDZKdkR0eC95ZDMKdlpkUHJKR25LcjhiWHRsdXNIL2FOYW5XdHEraFJBTkNBQVE0QnZ6ODI2L2lDaXV1U0NiZVkwc3FmOXljYWh0OApDRFYyUFF2bDFVM1FLSVRBcWRpaktLa0FSUFVkcWRrYWZzR21PMzBDeElPaDBLNWJSQW5XQzd4KwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
    room-user-payload:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          type: string
          description: Display name
          example: name
        canPublish:
          type: boolean
          description: Whether a user is allowed to publish audio/video tracks
          example: true
        metadata:
          type: string
          description: User defined payload to store for the participant
          example: "host user"
    create-room-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the room
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
    room-user-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        joinUrl:
          type: string
          description:
            Joining URL - use this for Livepeer's default meeting app (see the
            multiparticipant streaming guide for more info).
          example: https://meet.livepeer.chat
        token:
          type: string
          description:
            Joining JWT - this can be used if you have a custom meeting app (see
            the multiparticipant streaming guide for more info).
          example: token
    get-room-user-response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        joinedAt:
          type: integer
          description: Timestamp (in milliseconds) at which the user joined
          example: 1687517025261
        name:
          type: string
          description: The display name of the user
          example: name
        isPublisher:
          type: boolean
          description: Whether a user is allowed to publish audio/video tracks
          example: true
          default: true
        metadata:
          type: string
          description: User defined payload to store for the participant
          example: "host user"
    room-egress-payload:
      type: object
      required:
        - streamId
      additionalProperties: false
      properties:
        streamId:
          type: string
          description: The ID of the Livepeer Stream to stream to
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
    room-user-update-payload:
      type: object
      required:
        - canPublish
      additionalProperties: false
      properties:
        canPublish:
          type: boolean
          description:
            Whether a user is allowed to publish audio/video tracks (i.e. their
            microphone and webcam)
          example: true
          default: true
        metadata:
          type: string
          description: User defined payload to store for the participant
          example: "host user"

    task:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: Task ID
          readOnly: true
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        type:
          type: string
          description: Type of the task
          enum:
            - upload
            - import
            - export
            - export-data
            - transcode
            - transcode-file
        createdAt:
          readOnly: true
          type: number
          description: Timestamp (in milliseconds) at which task was created
          example: 1587667174725
        scheduledAt:
          readOnly: true
          type: number
          description: |
            Timestamp (in milliseconds) at which the task was scheduled for
            execution (e.g. after file upload finished).
          example: 1587667174725
        inputAssetId:
          type: string
          description: ID of the input asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        outputAssetId:
          type: string
          description: ID of the output asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
        params:
          type: object
          additionalProperties: false
          description: Parameters of the task
          properties:
            upload:
              type: object
              additionalProperties: false
              description: Parameters for the upload task
              properties:
                url:
                  type: string
                  description: URL of the asset to "upload"
                  example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                encryption:
                  $ref: "#/components/schemas/new-asset-payload/properties/encryption"
                recordedSessionId:
                  type: string
                  description: |
                    ID of the original recorded session to avoid re-transcoding
                    of the same content. Only used for import task.
                  example: 78df0075-b5f3-4683-a618-1086faca35dc
            import:
              $ref: "#/components/schemas/task/properties/params/properties/upload"
            export:
              $ref: "#/components/schemas/export-task-params"
            exportData:
              type: object
              additionalProperties: false
              description: Parameters for the export-data task
              required:
                - content
              properties:
                content:
                  type: object
                  description: File content to store into IPFS
                ipfs:
                  $ref: "#/components/schemas/ipfs-export-params"
                type:
                  type: string
                  description: Optional type of content
                id:
                  type: string
                  description: Optional ID of the content
            transcode:
              additionalProperties: false
              description: Parameters for the transcode task
              properties:
                profile:
                  $ref: "#/components/schemas/ffmpeg-profile"
            transcode-file:
              type: object
              additionalProperties: false
              description: Parameters for the transcode-file task
              properties:
                input:
                  type: object
                  additionalProperties: false
                  description: Input video file to transcode
                  properties:
                    url:
                      type: string
                      description: |
                        URL of a video to transcode, accepts object-store format
                        "s3+https"
                      example: "https://cdn.livepeer.com/ABC123/filename.mp4"
                storage:
                  type: object
                  additionalProperties: false
                  description: Storage for the output files
                  properties:
                    url:
                      type: string
                      description: |
                        URL of the output storage, accepts object-store format
                        "s3+https"
                      example: "s3+https://accessKeyId:secretAccessKey@s3Endpoint/bucket"
                outputs:
                  type: object
                  additionalProperties: false
                  description: Output formats
                  properties:
                    hls:
                      type: object
                      additionalProperties: false
                      description: HLS output format
                      properties:
                        path:
                          type: string
                          description: Path for the HLS output
                          example: /samplevideo/hls
                    mp4:
                      type: object
                      additionalProperties: false
                      description: MP4 output format
                      properties:
                        path:
                          type: string
                          description: Path for the MP4 output
                          example: /samplevideo/mp4
                profiles:
                  type: array
                  items:
                    $ref: "#/components/schemas/ffmpeg-profile"
                targetSegmentSizeSecs:
                  type: number
                  description: |
                    How many seconds the duration of each output segment should
                    be
                creatorId:
                  $ref: "#/components/schemas/input-creator-id"
        status:
          readOnly: true
          type: object
          additionalProperties: false
          description: Status of the task
          required:
            - phase
            - updatedAt
          properties:
            phase:
              type: string
              description: Phase of the task
              enum:
                - pending
                - waiting
                - running
                - failed
                - completed
                - cancelled
            updatedAt:
              type: number
              description: Timestamp (in milliseconds) at which task was updated
              example: 1587667174725
            progress:
              type: number
              description: Current progress of the task in a 0-1 ratio
            errorMessage:
              type: string
              description: Error message if the task failed
            retries:
              type: number
              description: Number of retries done on the task
            step:
              type: string
              writeOnly: true
              description: Step of the task processing
        output:
          type: object
          additionalProperties: false
          description: Output of the task
          properties:
            upload:
              type: object
              additionalProperties: true
              description: Output of the upload task
              properties:
                videoFilePath:
                  type: string
                  writeOnly: true
                metadataFilePath:
                  type: string
                  writeOnly: true
                assetSpec:
                  $ref: "#/components/schemas/asset"
            import:
              $ref: "#/components/schemas/task/properties/output/properties/upload"
            export:
              type: object
              additionalProperties: false
              description: Output of the export task
              properties:
                ipfs:
                  type: object
                  additionalProperties: false
                  required:
                    - videoFileCid
                  properties:
                    videoFileCid:
                      type: string
                      description: IPFS CID of the exported video file
                    videoFileUrl:
                      type: string
                      readOnly: true
                      description: URL for the file with the IPFS protocol
                    videoFileGatewayUrl:
                      readOnly: true
                      type: string
                      description:
                        URL to access file via HTTP through an IPFS gateway
                    nftMetadataCid:
                      type: string
                      description:
                        IPFS CID of the default metadata exported for the video
                    nftMetadataUrl:
                      readOnly: true
                      type: string
                      description:
                        URL for the metadata file with the IPFS protocol
                    nftMetadataGatewayUrl:
                      readOnly: true
                      type: string
                      description: |
                        URL to access metadata file via HTTP through an IPFS
                        gateway
            exportData:
              type: object
              additionalProperties: false
              description: Output of the export data task
              properties:
                ipfs:
                  type: object
                  additionalProperties: false
                  required:
                    - cid
                  properties:
                    cid:
                      type: string
                      description: IPFS CID of the exported data
            transcode:
              type: object
              additionalProperties: false
              properties:
                asset:
                  type: object
                  additionalProperties: true
                  properties:
                    videoFilePath:
                      type: string
                    metadataFilePath:
                      type: string
                    assetSpec:
                      $ref: "#/components/schemas/asset"

    input-creator-id:
      oneOf:
        - $ref: "#/components/schemas/creator-id"
        - type: string
          description: >-
            Helper syntax to specify an unverified creator ID, fully managed by
            the developer.
    creator-id:
      type: object
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - type
            - value
          properties:
            type:
              type: string
              enum:
                - unverified
            value:
              type: string
              description:
                Developer-managed ID of the user who created the resource.
    export-task-params:
      description: Parameters for the export task
      oneOf:
        - type: object
          additionalProperties: false
          required:
            - custom
          properties:
            custom:
              type: object
              description: custom URL parameters for the export task
              additionalProperties: false
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  pattern: "^http(s)?://"
                  description: URL where to export the asset
                  example: >-
                    https://s3.amazonaws.com/my-bucket/path/filename.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=LLMMB
                method:
                  type: string
                  description: Method to use on the export request
                  default: PUT
                headers:
                  type: object
                  description: Headers to add to the export request
                  additionalProperties:
                    type: string
        - type: object
          additionalProperties: false
          required:
            - ipfs
          properties:
            ipfs:
              $ref: "#/components/schemas/ipfs-export-params"
    signing-key:
      type: object
      additionalProperties: false
      required:
        - publicKey
      properties:
        id:
          type: string
          readOnly: true
          example: 78df0075-b5f3-4683-a618-1086faca35dc
        name:
          type: string
          example: "My signing key"
          description: Name of the signing key
        createdAt:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was created
          example: 1587667174725
        lastSeen:
          readOnly: true
          type: number
          description:
            Timestamp (in milliseconds) at which the signing-key was last used
          example: 1587667174725
        publicKey:
          type: string
          example: "LS0tLS1CRUdJTiBQUklWQVRFIBtFWS0tLS0tCk1JR0hBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJHMHdhd0lCQVFRZ1RDRzhRWDZKdkR0eC95ZDMKdlpkUHJKR25LcjhiWHRsdXNIL2FOYW5XdHEraFJBTkNBQVE0QnZ6ODI2L2lDaXV1U0NiZVkwc3FmOXljYWh0OApDRFYyUFF2bDFVM1FLSVRBcWRpaktLa0FSUFVkcWRrYWZzR21PMzBDeElPaDBLNWJSQW5XQzd4KwotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg=="
        disabled:
          type: boolean
          example: false
          description: Disable the signing key to allow rotation safely
    playback-policy:
      type: object
      description:
        Whether the playback policy for a asset or stream is public or signed
      additionalProperties: false
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - public
            - jwt
            - webhook
        webhookId:
          type: string
          description: ID of the webhook to use for playback policy
          example: 3e02c844-d364-4d48-b401-24b2773b5d6c
        webhookContext:
          type: object
          description: User-defined webhook context
          additionalProperties: true
          example: { "foo": "bar" }
    room:
      type: object
      required:
        - id
        - participants
        - events
      properties:
        id:
          type: string
          readOnly: true
          description: room ID
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
        createdAt:
          type: number
          readOnly: true
          description: Timestamp (in milliseconds) at which the room was created
          example: 1587667174725
        updatedAt:
          type: number
          readOnly: true
          description: Timestamp (in milliseconds) at which room was updated
          example: 1587667174725
        egressId:
          type: string
          description: internal ID for egress output
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e14
        participants:
          type: object
          additionalProperties:
            type: object
            properties:
              identity:
                type: string
                description: participant ID
                example: 3e02c844-d364-4d48-b401-24b2773b5d6c
              name:
                type: string
                description: user defined participant name
                example: "John Doe"
              joinedAt:
                type: integer
                description: the time the participant joined
                example: 1587667174725
              leftAt:
                type: integer
                description: the time the participant left
                example: 1587667174725
          example:
            3e02c844-d364-4d48-b401-24b2773b5d6c:
              identity: 3e02c844-d364-4d48-b401-24b2773b5d6c
              name: "John Doe"
              joinedAt: 1587667174725
              leftAt: 1587667174725
    usage-metric:
      type: object
      description: |
        An individual metric about usage of a user.
      required:
        - UserID
        - CreatorID
        - DeliveryUsageMins
        - TotalUsageMins
        - StorageUsageMins
      properties:
        UserID:
          type: string
          description: The user ID associated with the metric
          example: 3e02c844-d364-4d48-b401-24b2773b5d6c
        CreatorID:
          type: string
          description: The creator ID associated with the metric
          example: 3e02c844-d364-4d48-b401-24b2773b5d6c
        DeliveryUsageMins:
          type: number
          description: The number of minutes of delivery usage
          example: 10
        TotalUsageMins:
          type: number
          description: The number of minutes of total usage
          example: 10
        StorageUsageMins:
          type: number
          description: The number of minutes of storage usage
          example: 10
    viewership-metric:
      type: object
      description: |
        An individual metric about viewership of an asset. Necessarily, at least
        1 of playbackId and dStorageUrl will be present, depending on the query.
      required:
        - viewCount
        - playtimeMins
      properties:
        playbackId:
          type: string
          description: The playback ID associated with the metric
          example: 29eb9byolvwdqkup
        creatorId:
          type: string
          description: The ID of the creator associated with the metric
          example: 3e02c844-d364-4d48-b401-24b2773b5d6c
        viewerId:
          type: string
          description: The ID of the viewer associated with the metric
          example: 3e02c844-d364-4d48-b401-24b2773b5d6c
        dStorageUrl:
          type: string
          description: The URL of the distributed storage used for the asset
          example: https://ipfs.io/ipfs/bafybeihoqtemwitqajy6d654tmghqqvxmzgblddj2egst6yilplr5num6u
        timestamp:
          type: number
          example: 1587667174725
          description: |
            Timestamp (in milliseconds) when the metric was recorded. If the
            query contains a time step, this timestamp will point to the
            beginning of the time step period.
        device:
          type: string
          description: The device used by the viewer
          example: iPhone
        deviceType:
          type: string
          description: The type of the device used by the viewer
          example: mobile
        cpu:
          type: string
          description: The CPU used by the viewer's device
          example: Apple A13 Bionic
        os:
          type: string
          description: The operating system used by the viewer
          example: iOS
        browser:
          type: string
          description: The browser used by the viewer
          example: Safari
        browserEngine:
          type: string
          description: The browser engine used by the viewer's browser
          example: WebKit
        continent:
          type: string
          description: The continent where the viewer is located
          example: North America
        country:
          type: string
          description: The country where the viewer is located
          example: United States
        subdivision:
          type: string
          description: |
            The subdivision (e.g., state or province) where the viewer is
            located
          example: California
        timezone:
          type: string
          description: The timezone where the viewer is located
          example: America/Los_Angeles
        geohas:
          type: string
          description:
            Geographic encoding of the viewers location. Accurate to 3 digits.
          example: 9q8
        viewCount:
          type: integer
          description: The number of views for the asset
          example: 10
        playtimeMins:
          type: number
          description: The total playtime in minutes for the asset
          example: 10
        ttffMs:
          type: number
          description: The time-to-first-frame (TTFF) in milliseconds
          example: 2
        rebufferRatio:
          type: number
          description: The rebuffering ratio for the asset
          example: 0.1
        errorRate:
          type: number
          description: The error rate for the asset
          example: 5
        exitsBeforeStart:
          type: number
          description: |
            The percentage of sessions that existed before the asset started
            playing
          example: 10
    playback-info:
      type: object
      additionalProperties: false
      required:
        - type
        - meta
      properties:
        type:
          type: string
          example: vod
          enum:
            - live
            - vod
            - recording
        meta:
          type: object
          additionalProperties: false
          required:
            - source
          properties:
            live:
              type: number
              enum:
                - 0
                - 1
            playbackPolicy:
              $ref: "#/components/schemas/playback-policy"
            source:
              type: array
              items:
                type: object
                additionalProperties: false
                required:
                  - hrn
                  - type
                  - url
                properties:
                  hrn:
                    type: string
                    example: MP4
                    enum:
                      - HLS (TS)
                      - MP4
                      - WebRTC (H264)
                  type:
                    type: string
                    example: html5/video/mp4
                    enum:
                      - html5/application/vnd.apple.mpegurl
                      - html5/video/mp4
                      - html5/video/h264
                  url:
                    type: string
                    example: >-
                      https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                  size:
                    type: number
                    example: 494778
                  width:
                    type: number
                    example: 204
                  height:
                    type: number
                    example: 360
                  bitrate:
                    type: number
                    example: 449890
            attestation:
              $ref: "#/components/schemas/attestation"
    attestation:
      type: object
      additionalProperties: false
      required:
        - primaryType
        - domain
        - message
        - signature
      properties:
        id:
          type: string
          readOnly: true
          example: 5b9e63bb-6fd0-4bea-aff2-cc5d4eb9cad0
        primaryType:
          type: string
          description: Video Metadata EIP-712 primaryType
          enum:
            - VideoAttestation
        domain:
          type: object
          description: Video Metadata EIP-712 domain
          additionalProperties: false
          required:
            - name
            - version
          properties:
            name:
              type: string
              enum:
                - "Verifiable Video"
            version:
              type: string
              enum:
                - "1"
          example:
            name: "Verifiable Video"
            version: "1"
        message:
          type: object
          additionalProperties: false
          description: Video Metadata EIP-712 message content
          required:
            - video
            - attestations
            - signer
            - timestamp
          properties:
            video:
              type: string
            attestations:
              type: array
              items:
                type: object
                additionalProperties: false
                required:
                  - role
                  - address
                properties:
                  role:
                    type: string
                  address:
                    type: string
            signer:
              type: string
            timestamp:
              type: number
        signature:
          type: string
          description: Video Metadata EIP-712 message signature
          example: 0x0
        createdAt:
          type: number
          readOnly: true
          description:
            Timestamp (in milliseconds) at which the object was created
          example: 1587667174725
        signatureType:
          type: string
          enum:
            - eip712
            - flow
        storage:
          additionalProperties: false
          properties:
            ipfs:
              type: object
              additionalProperties: false
              properties:
                cid:
                  $ref: "#/components/schemas/ipfs-file-info/properties/cid"
                url:
                  $ref: "#/components/schemas/ipfs-file-info/properties/url"
                gatewayUrl:
                  $ref: "#/components/schemas/ipfs-file-info/properties/gatewayUrl"
                updatedAt:
                  readOnly: true
                  type: number
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was updated
                  example: 1587667174725
            status:
              $ref: "#/components/schemas/storage-status"
    ipfs-export-params:
      type: object
      additionalProperties: false
      properties:
        nftMetadataTemplate:
          $ref: "#/components/schemas/asset/properties/storage/properties/ipfs/properties/spec/properties/nftMetadataTemplate"
        nftMetadata:
          $ref: "#/components/schemas/asset/properties/storage/properties/ipfs/properties/spec/properties/nftMetadata"
        pinata:
          description: |
            Custom credentials for the Piñata service. Must have either
            a JWT or an API key and an API secret.
          oneOf:
            - type: object
              additionalProperties: false
              required:
                - jwt
              properties:
                jwt:
                  type: string
                  writeOnly: true
                  description: |
                    Will be added to the Authorization header as a
                    Bearer token.
            - type: object
              additionalProperties: false
              required:
                - apiKey
                - apiSecret
              properties:
                apiKey:
                  type: string
                  description: Will be added to the pinata_api_key header.
                apiSecret:
                  type: string
                  writeOnly: true
                  description:
                    Will be added to the pinata_secret_api_key header.
          example:
            jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDI4NjQwNzcsImlhdCI6MTYwMjI3NjA3NywiaXNzIjoiYXBpLmlzc3VlciIsInN1YiI6I
    storage-status:
      readOnly: true
      additionalProperties: false
      required:
        - phase
        - tasks
      properties:
        phase:
          type: string
          description: Phase of the asset storage
          enum:
            - waiting
            - processing
            - ready
            - failed
            - reverted
          example: ready
        progress:
          type: number
          description: Current progress of the task updating the storage.
          example: 0.5
        errorMessage:
          type: string
          description: Error message if the last storage changed failed.
          example: "Failed to export to IPFS"
        tasks:
          type: object
          additionalProperties: false
          properties:
            pending:
              type: string
              description: |
                ID of any currently running task that is exporting this
                asset to IPFS.
            last:
              type: string
              description: |
                ID of the last task to run successfully, that created
                the currently saved data.
            failed:
              type: string
              description: ID of the last task to fail execution.
paths:
  /stream:
    post:
      tags:
        - stream
      summary: Create a stream
      operationId: createStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new-stream-payload"
            example:
              name: "test_stream"
              record: true
              playbackPolicy:
                type: "jwt"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - stream
      summary: Retrieve streams
      operationId: getStreams
      parameters:
        - name: streamsonly
          description:
            Filter the API response and retrieve a specific subset of stream
            objects based on certain criteria
          example: 1
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{id}":
    parameters:
      - name: id
        description: ID of the stream
        example: "de7818e7-610a-4057-8f6f-b785dc1e6f88"
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - stream
      summary: Retrieve a stream
      operationId: getStream

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stream"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      tags:
        - stream
      summary: Update a stream
      operationId: updateStream
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stream-patch-payload"
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - stream
      summary: Delete a stream
      operationId: deleteStream
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the stream
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /multistream/target:
    get:
      tags:
        - multistream-target
      summary: Retrieve Multistream Targets
      operationId: getMultistreamTargets
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - multistream-target
      summary: Create a multistream target
      operationId: createMultistreamTarget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/multistream/target/{id}":
    parameters:
      - name: id
        description: ID of the multistream target
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - multistream-target
      summary: Retrieve a multistream target
      operationId: getMultistreamTarget
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/multistream-target"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      tags:
        - multistream-target
      summary: Update Multistream Target
      operationId: updateMultistreamTarget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multistream-target-patch-payload"
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - multistream-target
      summary: Delete a multistream target
      operationId: deleteMultistreamTarget
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /webhook:
    get:
      tags:
        - webhook
      summary: Retrieve a Webhook
      operationId: getWebhooks
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - webhook
      summary: Create a webhook
      operationId: createWebhook
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/webhook/{id}":
    get:
      tags:
        - webhook
      summary: Retrieve a webhook
      operationId: getWebhook
      parameters:
        - name: id
          description: ID of the webhook
          example: d3f09469-8b49-42de-85d5-4649792f1003
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      tags:
        - webhook
      parameters:
        - name: id
          description: ID of the webhook
          example: d3f09469-8b49-42de-85d5-4649792f1003

          in: path
          required: true
          schema:
            type: string
      summary: Update a webhook
      operationId: updateWebhook
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      parameters:
        - name: id
          description: ID of the webhook
          example: d3f09469-8b49-42de-85d5-4649792f1003

          in: path
          required: true
          schema:
            type: string
      summary: Delete a webhook
      tags:
        - webhook
      operationId: deleteWebhook
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset:
    get:
      tags:
        - asset
      summary: Retrieve assets
      operationId: getAssets
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset/request-upload:
    post:
      tags:
        - asset
      summary: Upload an asset
      operationId: requestUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new-asset-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - url
                  - tusEndpoint
                  - asset
                  - task
                properties:
                  url:
                    type: string
                    example: >-
                      https://origin.livepeer.com/api/asset/upload/direct?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                  tusEndpoint:
                    type: string
                    example: >-
                      https://origin.livepeer.com/api/asset/upload/tus?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                  asset:
                    $ref: "#/components/schemas/asset"
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /asset/upload/url:
    post:
      tags:
        - asset
      summary: Upload asset via URL
      operationId: uploadAssetViaURL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/new-asset-payload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - asset
                  - task
                properties:
                  asset:
                    $ref: "#/components/schemas/asset"
                  task:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/asset/{assetId}":
    get:
      tags:
        - asset
      summary: Retrieves an asset
      operationId: getAsset
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of the asset
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/asset"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - asset
      summary: Delete an asset
      operationId: deleteAsset
      parameters:
        - in: path
          name: assetId
          schema:
            type: string
          description: ID of the asset
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /room:
    post:
      tags:
        - room
      summary: Create a room
      operationId: createRoom
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/create-room-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}":
    get:
      tags:
        - room
      parameters:
        - name: id
          description: ID of the room
          in: path
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          required: true
          schema:
            type: string
      summary: Retrieve a room
      operationId: getRoom
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - room
      parameters:
        - name: id
          description: ID of the room
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          in: path
          required: true
          schema:
            type: string
      summary: Delete a room
      operationId: deleteRoom
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/egress":
    post:
      tags:
        - room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-egress-payload"
      parameters:
        - name: id
          description: ID of the room
          in: path
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          required: true
          schema:
            type: string
      summary: Start room RTMP egress
      operationId: startRoomEgress
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - room
      summary: Stop room RTMP egress
      operationId: stopRoomEgress
      parameters:
        - name: id
          description: ID of the room
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/user":
    post:
      tags:
        - room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-user-payload"
      parameters:
        - name: id
          description: ID of the room
          in: path
          required: true
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          schema:
            type: string
      summary: Create a room user
      operationId: createRoomUser
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/room-user-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/room/{id}/user/{userId}":
    get:
      tags:
        - room
      parameters:
        - name: id
          description: ID of the room
          in: path
          required: true
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          schema:
            type: string
        - name: userId
          in: path
          description: ID of the user
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          required: true
          schema:
            type: string
      summary: Get user details
      operationId: getRoomUserDetails
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/get-room-user-response"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      tags:
        - room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/room-user-update-payload"
      parameters:
        - name: id
          description: ID of the room
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: ID of the user
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          in: path
          required: true
          schema:
            type: string
      summary: Update a room user
      operationId: updateRoomUserDetails
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - room
      parameters:
        - name: id
          description: ID of the room
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: ID of the user
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          in: path
          required: true
          schema:
            type: string
      summary: Remove a user from the room
      operationId: deleteRoomUser
      responses:
        "204":
          description: Success
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /data/views/query:
    get:
      tags:
        - metrics
      summary: Query viewership metrics
      operationId: getViewershipsMetrics
      parameters:
        - name: playbackId
          in: query
          description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          schema:
            type: string
          example: d3f0ltwdzj4ax7mb
        - name: from
          in: query
          example: 2020-01-01T00:00:00Z

          description: Start timestamp for the query range (inclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: to
          in: query
          example: 2020-01-02T00:00:00Z

          description: End timestamp for the query range (exclusive)
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: timeStep
          in: query
          description: The time step to aggregate viewership metrics by
          example: day

          schema:
            type: string

            enum:
              - hour
              - day
              - week
              - month
              - year
        - name: assetId
          in: query
          description: The asset ID to filter metrics for
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          schema:
            type: string
        - name: streamId
          in: query
          description: The stream ID to filter metrics for
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b

          schema:
            type: string
        - name: creatorId
          in: query
          description: The creator ID to filter the query results
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8q
          schema:
            type: string
        - name: "breakdownBy[]"
          in: query
          description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          example:
            - deviceType
          schema:
            type: array
            items:
              type: string
              enum:
                - playbackId
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - geohash
                - viewerId
                - creatorId
      responses:
        "200":
          description: A list of Metric objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/viewership-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /data/views/query/creator:
    get:
      tags:
        - metrics
      summary: Query creator viewership metrics
      operationId: getCreatorMetrics
      parameters:
        - name: from
          in: query
          description: Start timestamp for the query range (inclusive)
          example: 2020-01-01T00:00:00Z
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: to
          in: query
          description: End timestamp for the query range (exclusive)
          example: 2020-01-02T00:00:00Z
          schema:
            oneOf:
              - type: string
                format: date-time
              - type: integer
        - name: timeStep
          in: query
          description: The time step to aggregate viewership metrics by
          example: day
          schema:
            type: string
            enum:
              - hour
              - day
              - week
              - month
              - year
        - name: assetId
          in: query
          description: The asset ID to filter metrics for
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          schema:
            type: string
        - name: streamId
          in: query
          description: The stream ID to filter metrics for
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
          schema:
            type: string
        - name: creatorId
          in: query
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8q
          description: The creator ID to filter the query results
          schema:
            type: string
        - name: "breakdownBy[]"
          in: query
          description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          example:
            - deviceType
          schema:
            type: array
            items:
              type: string
              enum:
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - viewerId
      responses:
        "200":
          description: A list of Metric objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/viewership-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/data/views/query/total/{playbackId}":
    get:
      tags:
        - metrics
      summary: Query public total views metrics
      operationId: getPublicTotalViewsMetrics
      parameters:
        - name: playbackId
          in: path
          required: true
          description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          schema:
            type: string
      responses:
        "200":
          description:
            A single Metric object with the viewCount and playtimeMins metrics.
          content:
            application/json:
              schema:
                type: object
                description: |
                  A simplified metric object about aggregate viewership of an
                  asset. Either playbackId or dStorageUrl will be set.
                required:
                  - viewCount
                  - playtimeMins
                properties:
                  playbackId:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/playbackId
                  dStorageUrl:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/dStorageUrl
                  viewCount:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/viewCount
                  playtimeMins:
                    $ref: >-
                      #/components/schemas/viewership-metric/properties/playtimeMins
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/data/usage/query":
    get:
      tags:
        - metrics
      summary: Query usage metrics
      operationId: getUsageMetrics
      parameters:
        - name: from
          in: query
          description: |
            Start millis timestamp for the query range (inclusive)
          schema:
            type: integer
          example: 1614556800000
        - name: to
          in: query
          example: 1614643200000
          description: |
            End millis timestamp for the query range (exclusive)
          schema:
            type: integer
        - name: timeStep
          in: query
          description: |
            The time step to aggregate viewership metrics by
          schema:
            type: string
            enum:
              - hour
              - day
          example: hour
        - name: creatorId
          in: query
          description: |
            The creator ID to filter the query results
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8t
          schema:
            type: string
      responses:
        "200":
          description: A Usage Metric object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/usage-metric"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /session:
    get:
      tags:
        - session
      summary: Retrieve sessions
      operationId: getSessions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/session/{id}":
    get:
      tags:
        - session
      summary: Retrieve a session
      operationId: getSession
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: ID of the session
          required: true
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/stream/{parentId}/sessions":
    get:
      tags:
        - session
      summary: Retrieve Recorded Sessions
      operationId: getRecordedSessions
      parameters:
        - in: path
          name: parentId
          schema:
            type: string
          description: ID of the parent stream
          required: true
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8b
        - in: query
          name: record
          example: 1
          schema:
            type: integer
            example: 1
          description: |
            Flag indicating if the response should only include recorded
            sessions
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/session"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /access-control/signing-key:
    post:
      tags:
        - access-control
      summary: Create a signing key
      operationId: createSigningKey
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signing-key-response-payload"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - access-control
      summary: Retrieves signing keys
      operationId: getSigningKeys
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/signing-key"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/access-control/signing-key/{keyId}":
    delete:
      tags:
        - access-control
      summary: Delete Signing Key
      operationId: deleteSigningKey
      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8a
          required: true
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - access-control
      summary: Retrieves a signing key
      operationId: getSigningKey

      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8a

          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signing-key"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      tags:
        - access-control
      summary: Update a signing key
      operationId: updateSigningKey
      parameters:
        - in: path
          name: keyId
          schema:
            type: string
          description: ID of the signing key
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8a
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disabled:
                  type: boolean
                name:
                  type: string
              additionalProperties: false
              examples:
                name: "My new signing key"
      responses:
        "204":
          description: Success (No content)
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /task:
    get:
      tags:
        - task
      summary: Retrieve Tasks
      operationId: getTasks
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/task"

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/task/{taskId}":
    get:
      tags:
        - task
      summary: Retrieve a Task
      operationId: getTask
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          description: ID of the task
          required: true
          example: 58069f71-dadc-4ae8-b483-9a5b0b2c4d8a
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        default:
          description: Error
  /transcode:
    post:
      tags:
        - transcode
      summary: Transcode a video
      operationId: transcode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/task"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  "/playback/{id}":
    get:
      tags:
        - playback
      summary: Retrieve Playback Info
      operationId: getPlaybackInfo
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the playback
          example: 5806xpedzb8hjkqk
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/playback-info"
        "404":
          description: Playback not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
