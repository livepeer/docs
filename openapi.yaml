components:
  schemas:
    asset:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which asset was created
          example: 1587667174725
          readOnly: true
          type: number
        createdByTokenName:
          description: Name of the token used to create this object
          readOnly: true
          type: string
        creatorId:
          $ref: '#/components/schemas/creator-id'
        downloadUrl:
          description: The URL to directly download the asset, e.g. `https://livepeercdn.com/asset/eawrrk06ts2d0mzb/video`. It is not recommended to use this for playback.
          example: https://livepeercdn.com/asset/eaw4nk06ts2d0mzb/video
          readOnly: true
          type: string
        hash:
          description: Hash of the asset
          items:
            additionalProperties: false
            properties:
              algorithm:
                description: Hash algorithm used to compute the hash
                example: sha256
                type: string
              hash:
                description: Hash of the asset
                example: 9b560b28b85378a5004117539196ab24e21bbd75b0e9eb1a8bc7c5fd80dc5b57
                type: string
            type: object
          type:
            - array
            - "null"
        id:
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          readOnly: true
          type: string
        name:
          description: |
            The name of the asset. This is not necessarily the filename - it can be a custom name or title.
          example: filename.mp4
          type: string
        playbackId:
          description: The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
          example: eaw4nk06ts2d0mzb
          type: string
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        playbackUrl:
          description: URL for HLS playback. **It is recommended to not use this URL**, and instead use playback IDs with the Playback Info endpoint to retrieve the playback URLs - this URL format is subject to change (e.g. https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8).
          example: https://livepeercdn.com/asset/ea03f37e-f861-4cdd-b495-0e60b6d753ad/index.m3u8
          readOnly: true
          type: string
        profiles:
          description: |
            Requested profiles for the asset to be transcoded into. Configured
            on the upload APIs payload or through the `stream.recordingSpec`
            field for recordings. If not specified, default profiles are derived
            based on the source input. If this is a recording, the source will
            not be present in this list but will be available for playback.
          items:
            $ref: '#/components/schemas/transcode-profile'
          type: array
        projectId:
          description: The ID of the project
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
          type: string
        size:
          description: Size of the asset in bytes
          example: 84934509
          readOnly: true
          type: number
        source:
          oneOf:
            - additionalProperties: false
              properties:
                encryption:
                  $ref: '#/components/schemas/new-asset-payload/properties/encryption'
                gatewayUrl:
                  description: Gateway URL from asset if parsed from provided URL on upload.
                  type: string
                type:
                  enum:
                    - url
                  type: string
                url:
                  description: URL from which the asset was uploaded.
                  type: string
              required:
                - type
                - url
            - additionalProperties: false
              properties:
                sessionId:
                  description: ID of the session from which this asset was created
                  type: string
                type:
                  enum:
                    - recording
                  type: string
              required:
                - type
                - sessionId
            - additionalProperties: false
              properties:
                assetId:
                  description: ID of the asset from which this asset was created.
                  type: string
                encryption:
                  $ref: '#/components/schemas/new-asset-payload/properties/encryption'
                playbackId:
                  description: Playback ID of the asset or stream from which this asset was created.
                  type: string
                requesterId:
                  description: ID of the requester from which this asset was created.
                  type: string
                sessionId:
                  description: ID of the session from which this asset was created.
                  type: string
                sourceId:
                  description: ID of the asset or stream from which this asset was created.
                  type: string
                type:
                  enum:
                    - directUpload
                    - clip
                  type: string
              required:
                - type
        staticMp4:
          description: Whether to generate MP4s for the asset.
          type: boolean
          writeOnly: true
        status:
          additionalProperties: false
          description: Status of the asset
          properties:
            errorMessage:
              description: Error message if the asset creation failed.
              type: string
            phase:
              description: Phase of the asset
              enum:
                - uploading
                - waiting
                - processing
                - ready
                - failed
                - deleting
                - deleted
              type: string
            progress:
              description: Current progress of the task creating this asset.
              type: number
            updatedAt:
              description: Timestamp (in milliseconds) at which the asset was last updated
              example: 1587667174725
              type: number
          readOnly: true
          required:
            - phase
            - updatedAt
          type: object
        storage:
          additionalProperties: false
          properties:
            ipfs:
              additionalProperties: false
              properties:
                $ref: '#/components/schemas/ipfs-file-info/properties'
                nftMetadata:
                  $ref: '#/components/schemas/ipfs-file-info'
                spec:
                  additionalProperties: false
                  default: {}
                  properties:
                    nftMetadata:
                      description: |
                        Additional data to add to the NFT metadata exported to
                        IPFS. Will be deep merged with the default metadata
                        exported.
                      type: object
                    nftMetadataTemplate:
                      default: file
                      description: |
                        Name of the NFT metadata template to export. 'player'
                        will embed the Livepeer Player on the NFT while 'file'
                        will reference only the immutable MP4 files.
                      enum:
                        - file
                        - player
                      type: string
                  type: object
                updatedAt:
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was
                    updated
                  example: 1587667174725
                  readOnly: true
                  type: number
              type: object
            status:
              $ref: '#/components/schemas/storage-status'
        type:
          description: Type of the asset.
          enum:
            - video
            - audio
          example: video
          type: string
        userId:
          deprecated: true
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
          readOnly: true
          type: string
        videoSpec:
          additionalProperties: false
          description: Video metadata
          properties:
            bitrate:
              description: Bitrate of the video in bits per second
              example: 1000000
              type: number
            duration:
              description: Duration of the asset in seconds (float)
              example: 23.8328
              type: number
            format:
              description: Format of the asset
              example: mp4
              type: string
            tracks:
              description: |
                List of tracks associated with the asset when the format
                contemplates them (e.g. mp4)
              items:
                additionalProperties: false
                properties:
                  bitDepth:
                    description: Bit depth of the track - only for audio tracks
                    example: 16
                    type: number
                  bitrate:
                    description: Bitrate of the track in bits per second
                    example: 1000000
                    type: number
                  channels:
                    description: Amount of audio channels in the track
                    example: 2
                    type: number
                  codec:
                    description: Codec of the track
                    example: aac
                    type: string
                  duration:
                    description: Duration of the track in seconds
                    example: 23.8238
                    type: number
                  fps:
                    description: Frame rate of the track - only for video tracks
                    example: 30
                    type: number
                  height:
                    description: Height of the track - only for video tracks
                    example: 1080
                    type: number
                  pixelFormat:
                    description: Pixel format of the track - only for video tracks
                    example: yuv420p
                    type: string
                  sampleRate:
                    description: |
                      Sample rate of the track in samples per second - only for
                      audio tracks
                    example: 44100
                    type: number
                  startTime:
                    description: Start time of the track in seconds
                    example: 23.8238
                    type: number
                  type:
                    description: type of track
                    enum:
                      - video
                      - audio
                    example: video
                    type: string
                  width:
                    description: Width of the track - only for video tracks
                    example: 1920
                    type: number
                required:
                  - type
                  - codec
                type: object
              type: array
          readOnly: true
          type: object
      required:
        - id
        - name
        - source
      type: object
    asset-patch-payload:
      additionalProperties: false
      properties:
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        name:
          $ref: '#/components/schemas/asset/properties/name'
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        storage:
          $ref: '#/components/schemas/new-asset-payload/properties/storage'
      type: object
    attestation:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which the object was created
          example: 1587667174725
          readOnly: true
          type: number
        domain:
          additionalProperties: false
          description: Video Metadata EIP-712 domain
          properties:
            name:
              enum:
                - Verifiable Video
              example: Verifiable Video
              type: string
            version:
              enum:
                - "1"
              example: "1"
              type: string
          required:
            - name
            - version
          type: object
        id:
          example: 5b9e63bb-6fd0-4bea-aff2-cc5d4eb9cad0
          readOnly: true
          type: string
        message:
          additionalProperties: false
          description: Video Metadata EIP-712 message content
          properties:
            attestations:
              items:
                additionalProperties: false
                properties:
                  address:
                    example: 1311768467294899700
                    type: string
                  role:
                    example: creator
                    type: string
                required:
                  - role
                  - address
                type: object
              type: array
            signer:
              example: 1311768467294899700
              type: string
            timestamp:
              example: 1587667174725
              type: number
            video:
              example: 5b9e63bb-6fd0-4bea-aff2-cc5d4eb9cad0
              type: string
          required:
            - video
            - attestations
            - signer
            - timestamp
          type: object
        primaryType:
          description: Video Metadata EIP-712 primaryType
          enum:
            - VideoAttestation
          example: VideoAttestation
          type: string
        signature:
          description: Video Metadata EIP-712 message signature
          example: 1311768467294899700
          type: string
        signatureType:
          enum:
            - eip712
            - flow
          example: eip712
          type: string
        storage:
          additionalProperties: false
          properties:
            ipfs:
              additionalProperties: false
              properties:
                $ref: '#/components/schemas/ipfs-file-info/properties'
                updatedAt:
                  description: |
                    Timestamp (in milliseconds) at which IPFS export task was updated
                  example: 1587667174725
                  readOnly: true
                  type: number
              type: object
            status:
              $ref: '#/components/schemas/storage-status'
      required:
        - primaryType
        - domain
        - message
        - signature
      type: object
    clip-payload:
      additionalProperties: false
      properties:
        endTime:
          description: The end timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._
          example: 1587667174725
          type: number
        name:
          description: The optional friendly name of the clip to create.
          example: My Clip
          type: string
        playbackId:
          description: The playback ID of the stream or stream recording to clip. Asset playback IDs are not supported yet.
          example: eaw4nk06ts2d0mzb
          type: string
        sessionId:
          description: The optional session ID of the stream to clip. This can be used to clip _recordings_ - if it is not specified, it will clip the ongoing livestream.
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          type: string
        startTime:
          description: The start timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._
          example: 1587667174725
          type: number
      required:
        - playbackId
        - startTime
      type: object
    create-room-response:
      properties:
        id:
          description: The ID of the room
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
          type: string
      type: object
    creator-id:
      oneOf:
        - additionalProperties: false
          properties:
            type:
              enum:
                - unverified
              example: unverified
              type: string
            value:
              description: Developer-managed ID of the user who created the resource.
              example: user123
              type: string
          required:
            - type
            - value
          type: object
    error:
      properties:
        errors:
          items:
            example:
              - id not provided
              - user not found
            type: string
          minItems: 1
          type: array
      type: object
    export-task-params:
      description: Parameters for the export task
      oneOf:
        - additionalProperties: false
          properties:
            custom:
              additionalProperties: false
              description: custom URL parameters for the export task
              properties:
                headers:
                  additionalProperties:
                    type: string
                  description: Headers to add to the export request
                  type: object
                method:
                  default: PUT
                  description: Method to use on the export request
                  example: POST
                  type: string
                url:
                  description: URL where to export the asset
                  example: https://s3.amazonaws.com/my-bucket/path/filename.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=LLMMB
                  format: uri
                  pattern: ^http(s)?://
                  type: string
              required:
                - url
              type: object
          required:
            - custom
          type: object
        - additionalProperties: false
          properties:
            ipfs:
              $ref: '#/components/schemas/ipfs-export-params'
          required:
            - ipfs
          type: object
    ffmpeg-profile:
      additionalProperties: false
      description: Transcode profile
      properties:
        bitrate:
          example: 3000000
          minimum: 400
          type: integer
        encoder:
          enum:
            - H.264
          type: string
        fps:
          example: 30
          minimum: 0
          type: integer
        fpsDen:
          example: 1
          minimum: 1
          type: integer
        gop:
          example: 2
          type: string
        height:
          expample: 720
          minimum: 128
          type: integer
        name:
          example: 720p
          maxLength: 500
          minLength: 1
          type: string
        profile:
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
          example: H264Baseline
          type: string
        quality:
          description: |
            Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
          example: 23
          maximum: 44
          minimum: 0
          type: integer
        width:
          example: 1280
          minimum: 128
          type: integer
      required:
        - width
        - name
        - height
        - bitrate
        - fps
      type: object
    get-room-user-response:
      properties:
        id:
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
          type: string
        isPublisher:
          default: true
          description: Whether a user is allowed to publish audio/video tracks
          example: true
          type: boolean
        joinedAt:
          description: Timestamp (in milliseconds) at which the user joined
          example: 1687517025261
          type: integer
        metadata:
          description: User defined payload to store for the participant
          type: string
        name:
          description: The display name of the user
          example: name
          type: string
      type: object
    input-creator-id:
      oneOf:
        - additionalProperties: false
          properties:
            type:
              enum:
                - unverified
              type: string
            value:
              type: string
          required:
            - type
            - value
          type: object
        - description: Helper syntax to specify an unverified creator ID, fully managed by the developer.
          type: string
    ipfs-export-params:
      additionalProperties: false
      properties:
        $ref: '#/components/schemas/asset/properties/storage/properties/ipfs/properties/spec/properties'
        pinata:
          description: |
            Custom credentials for the Piñata service. Must have either
            a JWT or an API key and an API secret.
          oneOf:
            - additionalProperties: false
              properties:
                jwt:
                  description: |
                    Will be added to the Authorization header as a
                    Bearer token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  type: string
                  writeOnly: true
              required:
                - jwt
              type: object
            - additionalProperties: false
              properties:
                apiKey:
                  description: Will be added to the pinata_api_key header.
                  example: "1234567890"
                  type: string
                apiSecret:
                  description: Will be added to the pinata_secret_api_key header.
                  example: 1234567890abcdef
                  type: string
                  writeOnly: true
              required:
                - apiKey
                - apiSecret
              type: object
      type: object
    ipfs-file-info:
      additionalProperties: false
      properties:
        cid:
          description: CID of the file on IPFS
          type: string
        gatewayUrl:
          description: URL to access file via HTTP through an IPFS gateway
          readOnly: true
          type: string
        url:
          description: URL with IPFS scheme for the file
          readOnly: true
          type: string
      required:
        - cid
      type: object
    multistream-target:
      additionalProperties: false
      properties:
        createdAt:
          description: |
            Timestamp (in milliseconds) at which multistream target object was
            created
          example: 1587667174725
          readOnly: true
          type: number
        disabled:
          description: |
            If true then this multistream target will not be used for pushing
            even if it is configured in a stream object.
          type: boolean
        id:
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          readOnly: true
          type: string
        name:
          type: string
        url:
          description: Livepeer-compatible multistream target URL (RTMP(S) or SRT)
          example: rtmps://live.my-service.tv/channel/secretKey
          format: uri
          pattern: ^(srt|rtmps?)://
          type: string
          writeOnly: true
        userId:
          deprecated: true
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
          readOnly: true
          type: string
      required:
        - url
      type: object
    multistream-target-patch-payload:
      $ref: '#/components/schemas/multistream-target'
      required: []
    new-asset-from-url-payload:
      additionalProperties: false
      properties:
        c2pa:
          $ref: '#/components/schemas/new-asset-payload/properties/c2pa'
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        encryption:
          $ref: '#/components/schemas/new-asset-payload/properties/encryption'
        name:
          $ref: '#/components/schemas/new-asset-payload/properties/name'
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        profiles:
          $ref: '#/components/schemas/new-asset-payload/properties/profiles'
        staticMp4:
          $ref: '#/components/schemas/new-asset-payload/properties/staticMp4'
        storage:
          $ref: '#/components/schemas/new-asset-payload/properties/storage'
        targetSegmentSizeSecs:
          $ref: '#/components/schemas/new-asset-payload/properties/targetSegmentSizeSecs'
        url:
          description: |
            URL where the asset contents can be retrieved, e.g. `https://s3.amazonaws.com/my-bucket/path/filename.mp4`.
            For an IPFS source, this should be similar to: `ipfs://{CID}`. For an Arweave
            source: `ar://{CID}`.
          example: https://s3.amazonaws.com/my-bucket/path/filename.mp4
          format: uri
          pattern: ^(https?|ipfs|ar)://
          type: string
      required:
        - name
        - url
    new-asset-payload:
      additionalProperties: false
      properties:
        c2pa:
          description: Decides if the output video should include C2PA signature
          type: boolean
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        encryption:
          additionalProperties: false
          properties:
            encryptedKey:
              description: Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
              type: string
              writeOnly: true
          required:
            - encryptedKey
          type: object
        name:
          description: |
            The name of the asset. This is not necessarily the filename - it can be a custom name or title.
          example: filename.mp4
          type: string
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        profiles:
          description:
            $ref: '#/components/schemas/asset/properties/profiles/description'
          items:
            $ref: '#/components/schemas/transcode-profile'
          type:
            - array
            - "null"
        staticMp4:
          description: Whether to generate MP4s for the asset.
          example: true
          type: boolean
        storage:
          additionalProperties: false
          properties:
            ipfs:
              description: |
                Set to true to make default export to IPFS. To customize the
                pinned files, specify an object with a spec field. False or null
                means to unpin from IPFS, but it's unsupported right now.
              oneOf:
                - additionalProperties: false
                  properties:
                    spec:
                      oneOf:
                        - type: "null"
                        - $ref: '#/components/schemas/asset/properties/storage/properties/ipfs/properties/spec'
                  type: object
                - type: boolean
                - type: "null"
        targetSegmentSizeSecs:
          description: How many seconds the duration of each output segment should be
          type: number
      required:
        - name
    new-signing-key-payload:
      additionalProperties: false
      properties:
        name:
          description: Name of the signing key
          type: string
        projectId:
          description: Project ID to which this signing key belongs
          type: string
    new-stream-payload:
      additionalProperties: false
      properties:
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        multistream:
          $ref: '#/components/schemas/stream/properties/multistream'
        name:
          $ref: '#/components/schemas/stream/properties/name'
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        profiles:
          default:
            $ref: '#/components/schemas/stream/properties/profiles/default'
          description:
            $ref: '#/components/schemas/stream/properties/profiles/description'
          items:
            $ref: '#/components/schemas/ffmpeg-profile'
          type:
            - array
            - "null"
        pull:
          $ref: '#/components/schemas/stream/properties/pull'
        record:
          $ref: '#/components/schemas/stream/properties/record'
        recordingSpec:
          additionalProperties: false
          description:
            $ref: '#/components/schemas/stream/properties/recordingSpec/description'
          properties:
            profiles:
              description:
                $ref: '#/components/schemas/stream/properties/recordingSpec/properties/profiles/description'
              items:
                $ref: '#/components/schemas/transcode-profile'
              type:
                - array
                - "null"
          type: object
        userTags:
          $ref: '#/components/schemas/stream/properties/userTags'
      required:
        - name
      type: object
    playback-info:
      additionalProperties: false
      properties:
        meta:
          additionalProperties: false
          properties:
            attestation:
              $ref: '#/components/schemas/attestation'
            dvrPlayback:
              items:
                additionalProperties: false
                properties:
                  error:
                    type: string
                  hrn:
                    enum:
                      - HLS (TS)
                    example: MP4
                    type: string
                  type:
                    enum:
                      - html5/application/vnd.apple.mpegurl
                    example: html5/video/mp4
                    type: string
                  url:
                    example: https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                    type: string
                type: object
              type: array
            live:
              enum:
                - 0
                - 1
              example: 0
              type: integer
            playbackPolicy:
              $ref: '#/components/schemas/playback-policy'
            source:
              items:
                additionalProperties: false
                properties:
                  bitrate:
                    example: 449890
                    type: number
                  height:
                    example: 360
                    type: number
                  hrn:
                    description: Human Readable Name
                    enum:
                      - HLS (TS)
                      - MP4
                      - WebRTC (H264)
                      - FLV (H264)
                      - Thumbnail (JPEG)
                      - Thumbnails
                    example: MP4
                    type: string
                  size:
                    example: 494778
                    type: number
                  type:
                    enum:
                      - html5/application/vnd.apple.mpegurl
                      - html5/video/mp4
                      - html5/video/h264
                      - video/x-flv
                      - image/jpeg
                      - text/vtt
                    example: html5/video/mp4
                    type: string
                  url:
                    example: https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                    type: string
                  width:
                    example: 204
                    type: number
                required:
                  - hrn
                  - type
                  - url
                type: object
              type: array
          required:
            - source
          type: object
        type:
          enum:
            - live
            - vod
            - recording
          example: vod
          type: string
      required:
        - type
        - meta
      type: object
    playback-policy:
      additionalProperties: false
      description: Whether the playback policy for an asset or stream is public or signed
      properties:
        allowedOrigins:
          description: List of allowed origins for CORS playback (<scheme>://<hostname>:<port>, <scheme>://<hostname>)
          items:
            type: string
          type: array
        refreshInterval:
          description: |
            Interval (in seconds) at which the playback policy should be
            refreshed (default 600 seconds)
          example: 600
          type: number
        type:
          enum:
            - public
            - jwt
            - webhook
          example: webhook
          type: string
        webhookContext:
          additionalProperties: true
          description: User-defined webhook context
          example:
            streamerId: my-custom-id
          type: object
        webhookId:
          description: ID of the webhook to use for playback policy
          example: 1bde4o2i6xycudoy
          type: string
      required:
        - type
      type:
        - object
        - "null"
    project:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
          readOnly: true
          type: number
        id:
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        name:
          example: test_project
          type: string
      required:
        - name
      type: object
    realtime-viewership-metric:
      description: |
        An individual metric about realtime viewership of a stream/asset.
      properties:
        browser:
          description: The browser used by the viewer.
          example: Safari
          type: string
        country:
          description: The country where the viewer is located.
          example: United States
          type: string
        device:
          description: The device used by the viewer.
          example: iPhone
          type: string
        errorRate:
          description: The error rate for the stream/asset.
          example: 0.1
          type: number
        playbackId:
          description: The playback ID associated with the metric.
          example: 1bde4o2i6xycudoy
          type: string
        viewCount:
          description: The number of views for the stream/asset.
          example: 100
          type: integer
      required:
        - viewCount
        - errorRate
      type: object
    room:
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which the room was created
          example: 1587667174725
          readOnly: true
          type: number
        egressId:
          description: internal ID for egress output
          type: string
        id:
          description: room ID
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
          readOnly: true
          type: string
        participants:
          additionalProperties:
            properties:
              identity:
                description: participant ID
                type: string
              joinedAt:
                description: the time the participant joined
                type: integer
              leftAt:
                description: the time the participant left
                type: integer
              name:
                description: user defined participant name
                type: string
            type: object
          type: object
        updatedAt:
          description: Timestamp (in milliseconds) at which room was updated
          example: 1587667174725
          readOnly: true
          type: number
      required:
        - id
        - participants
        - events
      type: object
    room-egress-payload:
      additionalProperties: false
      properties:
        streamId:
          description: The ID of the Livepeer Stream to stream to
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
          type: string
      required:
        - streamId
      type: object
    room-user-payload:
      additionalProperties: false
      properties:
        canPublish:
          description: Whether a user is allowed to publish audio/video tracks
          example: true
          type: boolean
        canPublishData:
          description: Whether a user is allowed to publish data messages to the room
          example: true
          type: boolean
        metadata:
          description: User defined payload to store for the participant
          type: string
        name:
          description: Display name
          example: name
          type: string
      required:
        - name
      type: object
    room-user-response:
      properties:
        id:
          description: The ID of the user
          example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
          type: string
        joinUrl:
          description: Joining URL - use this for Livepeer's default meeting app (see the multiparticipant streaming guide for more info).
          example: https://meet.livepeer.chat
          type: string
        token:
          description: Joining JWT - this can be used if you have a custom meeting app (see the multiparticipant streaming guide for more info).
          example: token
          type: string
      type: object
    room-user-update-payload:
      additionalProperties: false
      properties:
        canPublish:
          default: true
          description: Whether a user is allowed to publish audio/video tracks (i.e. their microphone and webcam)
          example: true
          type: boolean
        canPublishData:
          default: true
          description: Whether a user is allowed to publish data messages to the room
          example: true
          type: boolean
        metadata:
          description: User defined payload to store for the participant
          type: string
      required:
        - canPublish
      type: object
    session:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
          readOnly: true
          type: number
        id:
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        ingestRate:
          description: Rate at which sourceBytes increases (bytes/second)
          example: 1
          type: number
        isHealthy:
          $ref: '#/components/schemas/stream-health-payload/properties/is_healthy'
        issues:
          $ref: '#/components/schemas/stream-health-payload/properties/human_issues'
        kind:
          deprecated: true
          example: stream
          type: string
        lastSeen:
          example: 1587667174725
          type: number
        mp4Url:
          description: The URL for the stream session recording packaged in an MP4.
          readOnly: true
          type: string
        name:
          example: test_session
          type: string
        outgoingRate:
          description: Rate at which transcodedBytes increases (bytes/second)
          example: 2
          type: number
        parentId:
          description: Points to parent stream object
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          type: string
        playbackId:
          description: The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
          example: eaw4nk06ts2d0mzb
          type: string
        profiles:
          $ref: '#/components/schemas/stream/properties/profiles'
        projectId:
          description: The ID of the project
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
          type: string
        record:
          description: |
            Whether the stream should be recorded. Uses default settings. For more customization, create and configure an object store.
          example: false
          type: boolean
        recordingSpec:
          $ref: '#/components/schemas/stream/properties/recordingSpec'
        recordingStatus:
          description: The status of the recording process of this stream session.
          enum:
            - waiting
            - ready
            - failed
            - none
          readOnly: true
          type: string
        recordingUrl:
          description: URL for accessing the recording of this stream session.
          readOnly: true
          type: string
        sourceBytes:
          example: 1
          type: number
        sourceSegments:
          example: 1
          type: number
        sourceSegmentsDuration:
          description: Duration of all the source segments, sec
          example: 1
          type: number
        transcodedBytes:
          example: 2
          type: number
        transcodedSegments:
          example: 2
          type: number
        transcodedSegmentsDuration:
          description: Duration of all the transcoded segments, sec
          example: 2
          type: number
        userId:
          deprecated: true
          example: 66E2161C-7670-4D05-B71D-DA2D6979556F
          readOnly: true
          type: string
      required:
        - name
        - streamId
      type: object
    signing-key:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which the signing-key was created
          example: 1587667174725
          readOnly: true
          type: number
        disabled:
          description: Disable the signing key to allow rotation safely
          example: false
          type: boolean
        id:
          example: 78df0075-b5f3-4683-a618-1086faca35dc
          readOnly: true
          type: string
        lastSeen:
          description: Timestamp (in milliseconds) at which the signing-key was last used
          example: 1587667174725
          readOnly: true
          type: number
        name:
          description: Name of the signing key
          example: key1
          type: string
        projectId:
          description: The ID of the project
          example: aac12556-4d65-4d34-9fb
          type: string
        publicKey:
          type: string
        userId:
          deprecated: true
          example: 78df0075-b5f3-4683-a618-1086faca35dc
          readOnly: true
          type: string
      required:
        - publicKey
      type: object
    storage-status:
      additionalProperties: false
      properties:
        errorMessage:
          description: Error message if the last storage changed failed.
          example: Failed to update storage
          type: string
        phase:
          description: Phase of the asset storage
          enum:
            - waiting
            - processing
            - ready
            - failed
            - reverted
          example: ready
          type: string
        progress:
          description: Current progress of the task updating the storage.
          example: 0.5
          type: number
        tasks:
          additionalProperties: false
          properties:
            failed:
              description: ID of the last task to fail execution.
              example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
              type: string
            last:
              description: |
                ID of the last task to run successfully, that created
                the currently saved data.
              example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
              type: string
            pending:
              description: |
                ID of any currently running task that is exporting this
                asset to IPFS.
              example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
              type: string
          type: object
      readOnly: true
      required:
        - phase
        - tasks
    stream:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
          readOnly: true
          type: number
        createdByTokenName:
          description: Name of the token used to create this object
          example: abc-123-xyz-456
          readOnly: true
          type: string
        creatorId:
          $ref: '#/components/schemas/creator-id'
        id:
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        ingestRate:
          description: Rate at which sourceBytes increases (bytes/second)
          example: 1
          type: number
        isActive:
          description: If currently active
          example: true
          type: boolean
        isHealthy:
          $ref: '#/components/schemas/stream-health-payload/properties/is_healthy'
        issues:
          $ref: '#/components/schemas/stream-health-payload/properties/human_issues'
        kind:
          deprecated: true
          example: stream
          type: string
        lastSeen:
          example: 1587667174725
          type: number
        lastTerminatedAt:
          description: Timestamp (in milliseconds) when the stream was last terminated
          example: 1713281212993
          type:
            - number
            - "null"
        multistream:
          additionalProperties: false
          properties:
            targets:
              description: |
                References to targets where this stream will be simultaneously
                streamed to
              example:
                - id: PUSH123
                  profile: 720p
              items:
                $ref: '#/components/schemas/target'
              type: array
          type: object
        name:
          example: test_stream
          type: string
        outgoingRate:
          description: Rate at which transcodedBytes increases (bytes/second)
          example: 2
          type: number
        parentId:
          description: Points to parent stream object
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          type: string
        playbackId:
          description: The playback ID to use with the Playback Info endpoint to retrieve playback URLs.
          example: eaw4nk06ts2d0mzb
          type: string
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        profiles:
          default:
            - bitrate: 250000
              fps: 0
              height: 240
              name: 240p0
              width: 426
            - bitrate: 800000
              fps: 0
              height: 360
              name: 360p0
              width: 640
            - bitrate: 1600000
              fps: 0
              height: 480
              name: 480p0
              width: 854
            - bitrate: 3000000
              fps: 0
              height: 720
              name: 720p0
              width: 1280
          description: |
            Profiles to transcode the stream into. If not specified, a default
            set of profiles will be used with 240p, 360p, 480p and 720p
            resolutions. Keep in mind that the source rendition is always kept.
          items:
            $ref: '#/components/schemas/ffmpeg-profile'
          type: array
        projectId:
          description: The ID of the project
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
          type: string
        pull:
          additionalProperties: false
          description: |-
            Configuration for a stream that should be actively pulled from an
            external source, rather than pushed to Livepeer. If specified, the
            stream will not have a streamKey.
          properties:
            headers:
              additionalProperties:
                type: string
              description: Headers to be sent with the request to the pull source.
              example:
                Authorization: Bearer 123
              type: object
            isMobile:
              default: 0
              description: Indicates whether the stream will be pulled from a mobile source.
              oneOf:
                - description: '0: not mobile, 1: mobile screen share, 2: mobile camera.'
                  enum:
                    - 0
                    - 1
                    - 2
                  type: integer
                - description: If true, the stream will be pulled from a mobile source.
                  type: boolean
            location:
              additionalProperties: false
              description: |-
                Approximate location of the pull source. The location is used to
                determine the closest Livepeer region to pull the stream from.
              properties:
                lat:
                  description: |-
                    Latitude of the pull source in degrees. North is positive,
                    south is negative.
                  example: 39.739
                  type: number
                lon:
                  description: |-
                    Longitude of the pull source in degrees. East is positive,
                    west is negative.
                  example: -104.988
                  type: number
              required:
                - lat
                - lon
              type: object
            source:
              description: URL from which to pull from.
              example: https://myservice.com/live/stream.flv
              type: string
          required:
            - source
          type: object
        record:
          description: |
            Should this stream be recorded? Uses default settings. For more
            customization, create and configure an object store.
          example: false
          type: boolean
        recordingSpec:
          additionalProperties: false
          description: |
            Configuration for recording the stream. This can only be set if
            `record` is true.
          properties:
            profiles:
              description: |
                Profiles to process the recording of this stream into. If not
                specified, default profiles will be derived based on the stream
                input. Keep in mind that the source rendition is always kept.
              items:
                $ref: '#/components/schemas/transcode-profile'
              type: array
          type: object
        renditions:
          type: object
        sourceBytes:
          example: 1
          type: number
        sourceSegments:
          example: 1
          type: number
        sourceSegmentsDuration:
          description: Duration of all the source segments, sec
          example: 1
          type: number
        streamKey:
          description: Used to form RTMP ingest URL
          example: hgebdhhigq
          type: string
        suspended:
          description: If currently suspended
          type: boolean
        transcodedBytes:
          example: 2
          type: number
        transcodedSegments:
          example: 2
          type: number
        transcodedSegmentsDuration:
          description: Duration of all the transcoded segments, sec
          example: 2
          type: number
        userId:
          deprecated: true
          example: we7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        userTags:
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - items:
                  oneOf:
                    - type: string
                    - type: number
                type: array
          description: User input tags associated with the stream
          type: object
      required:
        - name
      type: object
    stream-health-payload:
      description: |
        Payload received from Catalyst about the health of livestreams currently
        or recently active on Mist.
      properties:
        extra:
          additionalProperties: true
          description: |
            An object containing any additional fields sent by mist in the
            health (STREAM_BUFFER) payload.
          type: object
        human_issues:
          description: A string array of human-readable errors describing issues affecting the stream, if any.
          oneOf:
            - type: "null"
            - items:
                type: string
              type: array
        is_active:
          description: Indicates whether the stream is currently live or not.
          type: boolean
        is_healthy:
          description: Indicates whether the stream is healthy or not.
          oneOf:
            - type: "null"
            - type: boolean
        issues:
          description: |
            "Raw issues affecting the stream as described by Mist, if any. We don't expose those to the end-user, showing only human_issues instead."
          oneOf:
            - type: "null"
            - type: string
        session_id:
          description: |
            The unique identifier for the specific session, created by Mist and
            used for creating the session object in the DB.
          type: string
        stream_name:
          description: |
            The name of the stream within Catalyst/Mist, normally comprised of
            the base stream name with the playback ID after the + sign.
          example: videorec+eaw4nk06ts2d0mzb
          type: string
        tracks:
          additionalProperties:
            properties:
              codec:
                description: The codec being used for the track.
                type: string
              fpks:
                description: |
                  The framerate of the track, in frames per thousand seconds
                  (kilo-second).
                type: number
              height:
                description: The height of the track's video resolution.
                type: number
              kbits:
                description: The bitrate of the track, in kilobits per second.
                type: number
              keys:
                additionalProperties:
                  type: number
                description: An object containing additional track-specific metrics.
                type: object
              width:
                description: The width of the track's video resolution.
                type: number
            type: object
          description: |
            A map of track objects containing information about the stream's
            tracks. The keys are the unique track ID from Mist.
          type: object
      required:
        - stream_name
        - is_active
        - is_healthy
      type: object
    stream-patch-payload:
      additionalProperties: false
      properties:
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        multistream:
          $ref: '#/components/schemas/stream/properties/multistream'
        playbackPolicy:
          $ref: '#/components/schemas/playback-policy'
        profiles:
          $ref: '#/components/schemas/new-stream-payload/properties/profiles'
        record:
          $ref: '#/components/schemas/stream/properties/record'
        recordingSpec:
          $ref: '#/components/schemas/new-stream-payload/properties/recordingSpec'
        suspended:
          $ref: '#/components/schemas/stream/properties/suspended'
        userTags:
          $ref: '#/components/schemas/stream/properties/userTags'
      type: object
    target:
      additionalProperties: false
      properties:
        id:
          description: ID of multistream target object where to push this stream
          example: PUSH123
          type: string
        profile:
          description: |
            Name of transcoding profile that should be sent. Use
            "source" for pushing source stream data
          example: 720p0
          maxLength: 500
          minLength: 1
          type: string
        spec:
          additionalProperties: false
          description: |
            Inline multistream target object. Will automatically
            create the target resource to be used by the created
            stream.
          properties:
            name:
              example: My target
              type: string
            url:
              $ref: '#/components/schemas/multistream-target/properties/url'
          required:
            - url
          type: object
          writeOnly: true
        videoOnly:
          default: false
          description: |
            If true, the stream audio will be muted and only silent
            video will be pushed to the target.
          example: false
          type: boolean
      required:
        - profile
      type: object
    target-add-payload:
      $ref: '#/components/schemas/target'
      additionalProperties: false
      type: object
    task:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which task was created
          example: 1587667174725
          readOnly: true
          type: number
        id:
          description: Task ID
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          readOnly: true
          type: string
        inputAssetId:
          description: ID of the input asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          type: string
        output:
          additionalProperties: false
          description: Output of the task
          properties:
            export:
              additionalProperties: false
              description: Output of the export task
              properties:
                ipfs:
                  additionalProperties: false
                  properties:
                    nftMetadataCid:
                      description: IPFS CID of the default metadata exported for the video
                      example: Qmabc123xyz341
                      type: string
                    nftMetadataGatewayUrl:
                      description: |
                        URL to access metadata file via HTTP through an IPFS
                        gateway
                      example: https://gateway.ipfs.io/ipfs/Qmabc123xyz341
                      readOnly: true
                      type: string
                    nftMetadataUrl:
                      description: URL for the metadata file with the IPFS protocol
                      example: ipfs://Qmabc123xyz341
                      readOnly: true
                      type: string
                    videoFileCid:
                      description: IPFS CID of the exported video file
                      example: Qmabc123xyz341
                      type: string
                    videoFileGatewayUrl:
                      description: URL to access file via HTTP through an IPFS gateway
                      example: https://gateway.ipfs.io/ipfs/Qmabc123xyz341
                      readOnly: true
                      type: string
                    videoFileUrl:
                      description: URL for the file with the IPFS protocol
                      example: ipfs://Qmabc123xyz341
                      readOnly: true
                      type: string
                  required:
                    - videoFileCid
                  type: object
              type: object
            exportData:
              additionalProperties: false
              description: Output of the export data task
              properties:
                ipfs:
                  additionalProperties: false
                  properties:
                    cid:
                      description: IPFS CID of the exported data
                      example: Qmabc123xyz341
                      type: string
                  required:
                    - cid
                  type: object
              type: object
            upload:
              additionalProperties: true
              description: Output of the upload task
              properties:
                assetSpec:
                  $ref: '#/components/schemas/asset'
                metadataFilePath:
                  example: https://s3.amazonaws.com/my-bucket/path/filename.json
                  type: string
                  writeOnly: true
                videoFilePath:
                  example: https://s3.amazonaws.com/my-bucket/path/filename.mp4
                  type: string
                  writeOnly: true
              type: object
          type: object
        outputAssetId:
          description: ID of the output asset
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          type: string
        params:
          additionalProperties: false
          description: Parameters of the task
          properties:
            clip:
              properties:
                catalystPipelineStrategy:
                  description: Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
                  enum:
                    - catalyst
                    - catalyst_ffmpeg
                    - background_external
                    - background_mist
                    - fallback_external
                    - external
                  example: catalyst_ffmpeg
                  type: string
                clipStrategy:
                  additionalProperties: false
                  description: Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
                  properties:
                    endTime:
                      $ref: '#/components/schemas/clip-payload/properties/endTime'
                    playbackId:
                      $ref: '#/components/schemas/clip-payload/properties/playbackId'
                    startTime:
                      $ref: '#/components/schemas/clip-payload/properties/startTime'
                  type: object
                inputId:
                  description: ID of the input asset or stream
                  example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
                  type: string
                sessionId:
                  description: ID of the session
                  example: d32ae9e6-c459-4931-9898-e86e2f5e7e16
                  type: string
                url:
                  description: URL of the asset to "clip"
                  example: https://asset-cdn.lp-playback.monster/hls/1bde4o2i6xycudoy/static360p0.mp4
                  type: string
            export:
              $ref: '#/components/schemas/export-task-params'
            exportData:
              additionalProperties: false
              description: Parameters for the export-data task
              properties:
                content:
                  description: File content to store into IPFS
                  example:
                    data: Hello, World!
                  type: object
                id:
                  description: Optional ID of the content
                  example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
                  type: string
                ipfs:
                  $ref: '#/components/schemas/ipfs-export-params'
                type:
                  description: Optional type of content
                  example: text/plain
                  type: string
              required:
                - content
              type: object
            transcode-file:
              additionalProperties: false
              description: Parameters for the transcode-file task
              properties:
                c2pa:
                  description: Decides if the output video should include C2PA signature
                  example: false
                  type: boolean
                creatorId:
                  $ref: '#/components/schemas/input-creator-id'
                input:
                  additionalProperties: false
                  description: Input video file to transcode
                  properties:
                    url:
                      description: |
                        URL of a video to transcode, accepts object-store format
                        "s3+https"
                      example: https://cdn.livepeer.com/ABC123/filename.mp4
                      type: string
                  type: object
                outputs:
                  additionalProperties: false
                  description: Output formats
                  properties:
                    hls:
                      additionalProperties: false
                      description: HLS output format
                      properties:
                        path:
                          description: Path for the HLS output
                          example: /samplevideo/hls
                          type: string
                      type: object
                    mp4:
                      additionalProperties: false
                      description: MP4 output format
                      properties:
                        path:
                          description: Path for the MP4 output
                          example: /samplevideo/mp4
                          type: string
                      type: object
                  type: object
                profiles:
                  items:
                    $ref: '#/components/schemas/transcode-profile'
                  type: array
                storage:
                  additionalProperties: false
                  description: Storage for the output files
                  properties:
                    url:
                      description: |
                        URL of the output storage, accepts object-store format
                        "s3+https"
                      example: s3+https://accessKeyId:secretAccessKey@s3Endpoint/bucket
                      type: string
                  type: object
                targetSegmentSizeSecs:
                  description: |
                    How many seconds the duration of each output segment should
                    be
                  example: 10
                  type: number
              type: object
            upload:
              additionalProperties: false
              description: Parameters for the upload task
              properties:
                c2pa:
                  description: Decides if the output video should include C2PA signature
                  example: true
                  type: boolean
                encryption:
                  $ref: '#/components/schemas/new-asset-payload/properties/encryption'
                profiles:
                  items:
                    $ref: '#/components/schemas/transcode-profile'
                  type: array
                targetSegmentSizeSecs:
                  description: How many seconds the duration of each output segment should be
                  example: 6
                  type: number
                url:
                  description: URL of the asset to "upload"
                  example: https://cdn.livepeer.com/ABC123/filename.mp4
                  type: string
              type: object
          type: object
        requesterId:
          description: ID of the requester hash(IP + SALT + PlaybackId)
          example: 09F8B46C-61A0-4254-9875-F71F4C605BC7
          type: string
        scheduledAt:
          description: |
            Timestamp (in milliseconds) at which the task was scheduled for
            execution (e.g. after file upload finished).
          example: 1587667174725
          readOnly: true
          type: number
        status:
          additionalProperties: false
          description: Status of the task
          properties:
            errorMessage:
              description: Error message if the task failed
              example: Failed to upload file
              type: string
            phase:
              description: Phase of the task
              enum:
                - pending
                - waiting
                - running
                - failed
                - completed
                - cancelled
              example: pending
              type: string
            progress:
              description: Current progress of the task in a 0-1 ratio
              example: 0.5
              type: number
            retries:
              description: Number of retries done on the task
              example: 3
              type: number
            step:
              description: Step of the task processing
              example: upload
              type: string
              writeOnly: true
            updatedAt:
              description: Timestamp (in milliseconds) at which task was updated
              example: 1587667174725
              type: number
          readOnly: true
          required:
            - phase
            - updatedAt
          type: object
        type:
          description: Type of the task
          enum:
            - upload
            - export
            - export-data
            - transcode-file
            - clip
          example: upload
          type: string
      type: object
    transcode-payload:
      additionalProperties: false
      properties:
        c2pa:
          description: Decides if the output video should include C2PA signature
          type: boolean
        creatorId:
          $ref: '#/components/schemas/input-creator-id'
        input:
          oneOf:
            - additionalProperties: false
              description: URL input video
              properties:
                url:
                  description: URL of the video to transcode
                  example: https://s3.amazonaws.com/bucket/file.mp4
                  format: uri
                  pattern: ^(https?|ipfs|ar)://
                  type: string
              required:
                - url
              type: object
            - additionalProperties: false
              description: S3-like storage input video
              properties:
                bucket:
                  description: Bucket with input file
                  example: inputbucket
                  type: string
                credentials:
                  additionalProperties: false
                  description: Credentials for the private input video storage
                  properties:
                    accessKeyId:
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                      type: string
                    secretAccessKey:
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                      type: string
                  required:
                    - accessKeyId
                    - secretAccessKey
                  type: object
                endpoint:
                  description: 'Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)'
                  example: https://gateway.storjshare.io
                  format: uri
                  pattern: ^http(s)?://
                  type: string
                path:
                  description: Path to the input file inside the bucket
                  example: /path/file.mp4
                  type: string
                type:
                  description: |
                    Type of service. This is optional and defaults to `url` if
                    ŚURL field is provided.
                  enum:
                    - s3
                  type: string
              required:
                - type
                - endpoint
                - bucket
                - path
                - credentials
              type: object
        outputs:
          additionalProperties: false
          description: Output formats
          properties:
            fmp4:
              additionalProperties: false
              description: FMP4 output format
              properties:
                path:
                  description: Path for the FMP4 output
                  example: /samplevideo/fmp4
                  type: string
              required:
                - path
              type: object
            hls:
              additionalProperties: false
              description: HLS output format
              properties:
                path:
                  description: Path for the HLS output
                  example: /samplevideo/hls
                  type: string
              required:
                - path
              type: object
            mp4:
              additionalProperties: false
              description: MP4 output format
              properties:
                path:
                  description: Path for the MP4 output
                  example: /samplevideo/mp4
                  type: string
              required:
                - path
              type: object
          type: object
        profiles:
          items:
            $ref: '#/components/schemas/transcode-profile'
          type: array
        storage:
          oneOf:
            - additionalProperties: false
              description: Storage for the output files
              properties:
                bucket:
                  description: Bucket with output files
                  example: outputbucket
                  type: string
                credentials:
                  additionalProperties: false
                  description: Credentials for the output video storage
                  properties:
                    accessKeyId:
                      description: Access Key ID
                      example: AKIAIOSFODNN7EXAMPLE
                      type: string
                    secretAccessKey:
                      description: Secret Access Key
                      example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                      type: string
                  required:
                    - accessKeyId
                    - secretAccessKey
                  type: object
                endpoint:
                  description: 'Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)'
                  example: https://gateway.storjshare.io
                  format: uri
                  pattern: ^http(s)?://
                  type: string
                type:
                  description: Type of service used for output files
                  enum:
                    - s3
                  type: string
              required:
                - type
                - endpoint
                - bucket
                - credentials
              type: object
            - additionalProperties: false
              description: Storage for the output files
              properties:
                credentials:
                  additionalProperties: false
                  description: |
                    Delegation proof for Livepeer to be able to upload to
                    web3.storage
                  properties:
                    proof:
                      description: Base64 encoded UCAN delegation proof
                      example: EaJlcm9vdHOAZ3ZlcnNpb24BmgIBcRIg2uxHpcPYSWNtifMKFkPC7IEDvFDCxCd3ADViv0coV7SnYXNYRO2hA0AnblHEW38s3lSlcwaDjPn
                      type: string
                  required:
                    - proof
                  type: object
                type:
                  description: Type of service used for output files
                  enum:
                    - web3.storage
                  type: string
              required:
                - type
                - credentials
              type: object
        targetSegmentSizeSecs:
          description: How many seconds the duration of each output segment should be
          type: number
      required:
        - input
        - storage
        - outputs
    transcode-profile:
      additionalProperties: false
      description: Transcode API profile
      properties:
        bitrate:
          example: 3000000
          minimum: 400
          type: integer
        encoder:
          enum:
            - H.264
            - HEVC
            - VP8
            - VP9
          example: H.264
          type: string
        fps:
          example: 30
          minimum: 0
          type: integer
        fpsDen:
          example: 1
          minimum: 1
          type: integer
        gop:
          example: 2
          type: string
        height:
          expample: 720
          minimum: 128
          type: integer
        name:
          example: 720p
          maxLength: 500
          minLength: 1
          type: string
        profile:
          enum:
            - H264Baseline
            - H264Main
            - H264High
            - H264ConstrainedHigh
          example: H264Baseline
          type: string
        quality:
          description: |
            Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
          example: 23
          maximum: 44
          minimum: 0
          type: integer
        width:
          example: 1280
          minimum: 128
          type: integer
      required:
        - bitrate
      type: object
    usage:
      additionalProperties: false
      properties:
        date:
          example: usage
          readOnly: true
          type: number
        id:
          description: day associated with usage
          example: 2021-01-30T00:00:00Z
          type: string
        sourceSegments:
          example: 200000
          type: number
        sourceSegmentsDuration:
          example: 200000
          type: number
        streamCount:
          example: 200000
          type: number
        transcodedSegments:
          example: 200000
          type: number
        transcodedSegmentsDuration:
          example: 200000
          type: number
      type: object
    usage-metric:
      description: |
        An individual metric about usage of a user.
      properties:
        CreatorID:
          description: The creator ID associated with the metric
          example: john@doe.com
          type: string
        DeliveryUsageMins:
          description: Total minutes of delivery usage.
          example: 100
          type: number
        StorageUsageMins:
          description: Total minutes of storage usage.
          example: 100
          type: number
        TotalUsageMins:
          description: Total transcoded minutes.
          example: 100
          type: number
        UserID:
          description: The user ID associated with the metric
          example: 1bde4o2i6xycudoy
          type: string
      type: object
    user:
      additionalProperties: false
      properties:
        ccBrand:
          example: 1234
          type: string
        ccLast4:
          example: 1234
          type: string
        createdAt:
          description: Timestamp (in milliseconds) at which user object was created
          example: 1587667174725
          type: number
        disabled:
          type: boolean
        email:
          description: user email address
          example: useremail@gmail.com
          type: string
        emailValid:
          example: true
          type: boolean
        emailValidToken:
          example: E1F53135E559C253
          type: string
          writeOnly: true
        firstName:
          example: Joe
          type: string
        id:
          example: abc123
          readOnly: true
          type: string
        lastName:
          example: Smith
          type: string
        lastSeen:
          description: Timestamp (in milliseconds) at which user's password was used
          example: 1587667174725
          type: number
        lastStreamedAt:
          description: |
            Timestamp (in milliseconds) at which user streamed RTMP stream last
            time
          example: 1587667174725
          type: number
        organization:
          example: Livepeer
          type: string
        password:
          example: thisisapassword
          maxLength: 64
          minLength: 64
          type: string
          writeOnly: true
        phone:
          example: 2034212122
          type: string
        planChangedAt:
          description: Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
          type: number
        salt:
          example: E1F53135E559C253
          type: string
          writeOnly: true
        suspended:
          type: boolean
        verifiedAt:
          description: Timestamp (in milliseconds) at which user object was verified
          example: 1587667174725
          type: number
      required:
        - email
        - password
      type: object
    viewership-metric:
      description: |
        An individual metric about viewership of a stream/asset. Necessarily, at least
        1 of playbackId and dStorageUrl will be present, depending on the query.
      properties:
        browser:
          description: The browser used by the viewer.
          example: Safari
          type: string
        browserEngine:
          description: The browser engine used by the viewer's browser.
          example: WebKit
          type: string
        continent:
          description: The continent where the viewer is located.
          example: North America
          type: string
        country:
          description: The country where the viewer is located.
          example: United States
          type: string
        cpu:
          description: The CPU used by the viewer's device.
          example: ARM
          type: string
        creatorId:
          description: The ID of the creator associated with the metric.
          example: john@doe.com
          type: string
        dStorageUrl:
          description: The URL of the distributed storage used for the asset
          example: ipfs://QmZ4
          type: string
        device:
          description: The device used by the viewer.
          example: iPhone
          type: string
        deviceType:
          description: The type of the device used by the viewer.
          example: mobile
          type: string
        errorRate:
          description: The error rate for the stream/asset.
          example: 0.1
          type: number
        exitsBeforeStart:
          description: |
            The percentage of sessions that existed before the asset started
            playing.
          example: 0.5
          type: number
        geohash:
          description: Geographic encoding of the viewers location. Accurate to 3 digits.
          example: 123
          type: string
        os:
          description: The operating system used by the viewer.
          example: iOS
          type: string
        playbackId:
          description: The playback ID associated with the metric.
          example: 1bde4o2i6xycudoy
          type: string
        playtimeMins:
          description: The total playtime in minutes for the stream/asset.
          example: 10
          type: number
        rebufferRatio:
          description: The rebuffering ratio for the asset.
          example: 0.1
          type: number
        subdivision:
          description: |
            The subdivision (e.g., state or province) where the viewer is
            located.
          example: California
          type: string
        timestamp:
          description: |
            Timestamp (in milliseconds) when the metric was recorded. If the
            query contains a time step, this timestamp will point to the
            beginning of the time step period.
          example: 1587667174725
          type: number
        timezone:
          description: The timezone where the viewer is located.
          example: America/Los_Angeles
          type: string
        ttffMs:
          description: The time-to-first-frame (TTFF) in milliseconds.
          example: 100
          type: number
        viewCount:
          description: The number of views for the stream/asset.
          example: 100
          type: integer
        viewerId:
          description: The ID of the viewer associated with the metric.
          example: 1bde4o2i6xycudoy
          type: string
      required:
        - viewCount
        - playtimeMins
      type: object
    webhook:
      additionalProperties: false
      properties:
        createdAt:
          description: Timestamp (in milliseconds) at which stream object was created
          example: 1587667174725
          readOnly: true
          type: number
        events:
          example:
            - stream.started
            - stream.idle
          items:
            enum:
              - stream.started
              - stream.detection
              - stream.idle
              - recording.ready
              - recording.started
              - recording.waiting
              - multistream.connected
              - multistream.error
              - multistream.disconnected
              - playback.user.new
              - playback.accessControl
              - asset.created
              - asset.updated
              - asset.failed
              - asset.ready
              - asset.deleted
              - task.spawned
              - task.updated
              - task.completed
              - task.failed
            type: string
          type: array
        id:
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        kind:
          deprecated: true
          example: webhook
          readOnly: true
          type: string
        name:
          example: test_webhook
          type: string
        projectId:
          description: The ID of the project
          example: aac12556-4d65-4d34-9fb6-d1f0985eb0a9
          type: string
        sharedSecret:
          description: shared secret used to sign the webhook payload
          example: my-secret
          type: string
          writeOnly: true
        status:
          description: status of webhook
          properties:
            lastFailure:
              description: failure timestamp and error message with status code
              properties:
                error:
                  description: Webhook failure error message
                  example: Error message
                  readOnly: true
                  type: string
                response:
                  description: Webhook failure response
                  example: Response body
                  readOnly: true
                  type: string
                statusCode:
                  description: Webhook failure status code
                  example: 500
                  readOnly: true
                  type: number
                timestamp:
                  description: Timestamp (in milliseconds) at which the webhook last failed
                  example: 1587667174725
                  readOnly: true
                  type: number
              readOnly: true
              type: object
            lastTriggeredAt:
              description: |
                Timestamp (in milliseconds) at which the webhook last was
                triggered
              example: 1587667174725
              type: number
          readOnly: true
          type: object
        streamId:
          description: streamId of the stream on which the webhook is applied
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          type: string
        url:
          example: https://my-service.com/webhook
          format: uri
          pattern: ^http(s)?://
          type: string
        userId:
          deprecated: true
          readOnly: true
          type: string
      required:
        - name
        - url
      type: object
    webhook-log:
      additionalProperties: false
      properties:
        createdAt:
          description: |
            Timestamp (in milliseconds) at which webhook request object was
            created
          example: 1587667174725
          readOnly: true
          type: number
        duration:
          description: The time taken (in seconds) to make the webhook request
          example: 0.5
          type: number
        event:
          description: The event type that triggered the webhook request
          example: stream.started
          readOnly: true
          type: string
        id:
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
        request:
          properties:
            body:
              description: request body
              example: '{"event": "stream.started"}'
              type: string
            headers:
              additionalProperties:
                type: string
              description: HTTP request headers
              example:
                User-Agent: livepeer.studio
              type: object
            method:
              description: HTTP request method
              example: POST
              type: string
            url:
              description: URL used for the request
              example: https://my-service.com/webhook
              type: string
          type: object
        response:
          additionalProperties: false
          properties:
            body:
              description: response body
              type: string
            status:
              description: HTTP status code
              type: number
            statusText:
              description: response status text
              type: string
          type: object
        success:
          description: Whether the webhook request was successful
          example: true
          type: boolean
        webhookId:
          description: ID of the webhook this request was made for
          example: de7818e7-610a-4057-8f6f-b785dc1e6f88
          readOnly: true
          type: string
      required:
        - id
        - webhookId
      type: object
  securitySchemes:
    apiKey:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: |
    Welcome to the Livepeer API reference docs. Here you will find all the
    endpoints exposed on the standard Livepeer API, learn how to use them and
    what they return.
  title: Livepeer API Reference
  version: 1.0.0
openapi: 3.1.0
paths:
  /access-control/signing-key:
    get:
      operationId: getSigningKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/signing-key'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieves signing keys
      tags:
        - accessControl
      x-codeSamples:
        - label: getSigningKeys
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.accessControl.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSigningKeys
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.AccessControl.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getSigningKeys
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
    post:
      description: |
        The publicKey is a representation of the public key, encoded as base 64 and is passed as a string, and  the privateKey is displayed only on creation. This is the only moment where the client can save the private key, otherwise it will be lost. Remember to decode your string when signing JWTs.
        Up to 10 signing keys can be generated, after that you must delete at least one signing key to create a new one.
      operationId: createSigningKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signing-key'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a signing key
      tags:
        - accessControl
      x-codeSamples:
        - label: createSigningKey
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.accessControl.create();

              // Handle the result
              console.log(result)
            }

            run();
        - label: createSigningKey
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.AccessControl.Create(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SigningKey != nil {
                    // handle response
                }
            }
        - label: createSigningKey
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.create()

            if res.signing_key is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /access-control/signing-key/{keyId}:
    delete:
      operationId: deleteSigningKey
      parameters:
        - description: ID of the signing key
          in: path
          name: keyId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete Signing Key
      tags:
        - accessControl
      x-codeSamples:
        - label: deleteSigningKey
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.accessControl.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteSigningKey
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var keyID string = "<value>"
                ctx := context.Background()
                res, err := s.AccessControl.Delete(ctx, keyID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteSigningKey
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.delete(key_id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      operationId: getSigningKey
      parameters:
        - description: ID of the signing key
          in: path
          name: keyId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signing-key'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieves a signing key
      tags:
        - accessControl
      x-codeSamples:
        - label: getSigningKey
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.accessControl.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSigningKey
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var keyID string = "<value>"
                ctx := context.Background()
                res, err := s.AccessControl.Get(ctx, keyID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.SigningKey != nil {
                    // handle response
                }
            }
        - label: getSigningKey
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.get(key_id='<value>')

            if res.signing_key is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
    patch:
      operationId: updateSigningKey
      parameters:
        - description: ID of the signing key
          in: path
          name: keyId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              properties:
                disabled:
                  type: boolean
                name:
                  type: string
              type: object
        required: true
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Update a signing key
      tags:
        - accessControl
      x-codeSamples:
        - label: updateSigningKey
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.accessControl.update("<value>", {});

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateSigningKey
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var keyID string = "<value>"

                requestBody := operations.UpdateSigningKeyRequestBody{}
                ctx := context.Background()
                res, err := s.AccessControl.Update(ctx, keyID, requestBody)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: updateSigningKey
          lang: python
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.update(key_id='<value>', request_body=operations.UpdateSigningKeyRequestBody())

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: update
  /asset:
    get:
      operationId: getAssets
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/asset'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve assets
      tags:
        - asset
      x-codeSamples:
        - label: getAssets
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAssets
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Asset.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getAssets
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
  /asset/{assetId}:
    delete:
      operationId: deleteAsset
      parameters:
        - description: ID of the asset
          in: path
          name: assetId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete an asset
      tags:
        - asset
      x-codeSamples:
        - label: deleteAsset
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteAsset
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var assetID string = "<value>"
                ctx := context.Background()
                res, err := s.Asset.Delete(ctx, assetID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteAsset
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.delete(asset_id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      operationId: getAsset
      parameters:
        - description: ID of the asset
          in: path
          name: assetId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieves an asset
      tags:
        - asset
      x-codeSamples:
        - label: getAsset
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getAsset
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var assetID string = "<value>"
                ctx := context.Background()
                res, err := s.Asset.Get(ctx, assetID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Asset != nil {
                    // handle response
                }
            }
        - label: getAsset
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.get(asset_id='<value>')

            if res.asset is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
    patch:
      operationId: updateAsset
      parameters:
        - description: ID of the asset
          in: path
          name: assetId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset-patch-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Patch an asset
      tags:
        - asset
      x-codeSamples:
        - label: updateAsset
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { Type } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.update("<value>", {
                name: "filename.mp4",
                playbackPolicy: {
                  type: Type.Webhook,
                  webhookId: "1bde4o2i6xycudoy",
                  webhookContext: {
                    "streamerId": "my-custom-id",
                  },
                  refreshInterval: 600,
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateAsset
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var assetID string = "<value>"

                assetPatchPayload := components.AssetPatchPayload{
                    Name: livepeergo.String("filename.mp4"),
                    PlaybackPolicy: &components.PlaybackPolicy{
                        RefreshInterval: livepeergo.Float64(600),
                        Type: components.TypeWebhook,
                        WebhookContext: map[string]any{
                            "streamerId": "my-custom-id",
                        },
                        WebhookID: livepeergo.String("1bde4o2i6xycudoy"),
                    },
                }
                ctx := context.Background()
                res, err := s.Asset.Update(ctx, assetID, assetPatchPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Asset != nil {
                    // handle response
                }
            }
        - label: updateAsset
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.update(asset_id='<value>', asset_patch_payload=components.AssetPatchPayload(
                name='filename.mp4',
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
            ))

            if res.asset is not None:
                # handle response
                pass
      x-speakeasy-name-override: update
  /asset/request-upload:
    post:
      description: |
        To upload an asset, your first need to request for a direct upload URL
        and only then actually upload the contents of the asset.
        \
        \
        Once you created a upload link, you have 2 options, resumable or direct
        upload. For a more reliable experience, you should use resumable uploads
        which will work better for users with unreliable or slow network
        connections. If you want a simpler implementation though, you should
        just use a direct upload.


        ## Direct Upload
        For a direct upload, make a PUT request to the URL received in the url
        field of the response above, with the raw video file as the request
        body. response above:


        ## Resumable Upload
        Livepeer supports resumable uploads via TUS. This section provides a
        simple example of how to use tus-js-client to upload a video file.
        \
        \
        From the previous section, we generated a URL to upload a video file to
        Livepeer on POST /api/asset/request-upload. You should use the
        tusEndpoint field of the response to upload the video file and track the
        progress:

        ```
        # This assumes there is an `input` element of `type="file"` with id
        `fileInput` in the HTML


        const input = document.getElementById('fileInput');

        const file = input.files[0];

        const upload = new tus.Upload(file, {
          endpoint: tusEndpoint, // URL from `tusEndpoint` field in the
        `/request-upload` response
          metadata: {
            filename,
            filetype: 'video/mp4',
          },
          uploadSize: file.size,
          onError(err) {
            console.error('Error uploading file:', err);
          },
          onProgress(bytesUploaded, bytesTotal) {
            const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
            console.log('Uploaded ' + percentage + '%');
          },
          onSuccess() {
            console.log('Upload finished:', upload.url);
          },
        });

        const previousUploads = await upload.findPreviousUploads();

        if (previousUploads.length > 0) {
          upload.resumeFromPreviousUpload(previousUploads[0]);
        }

        upload.start();

        ```

        > Note: If you are using tus from node.js, you need to add a custom URL
        storage to enable resuming from previous uploads. On the browser, this
        is enabled by default using local storage. In node.js, add urlStorage:
        new tus.FileUrlStorage("path/to/tmp/file"), to the UploadFile object
        definition above.
      operationId: requestUpload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-asset-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  asset:
                    $ref: '#/components/schemas/asset'
                  task:
                    additionalProperties: false
                    properties:
                      id:
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
                        type: string
                    required:
                      - id
                    type: object
                  tusEndpoint:
                    description: The [TUS-compatible](https://tus.io/) endpoint for resumable uploads. **This is the recommended way to upload assets.** See the [TUS-js](https://github.com/tus/tus-js-client) client for more information.
                    example: https://origin.livepeer.com/api/asset/upload/tus?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                    type: string
                  url:
                    description: The direct upload endpoint for which supports PUT requests. **It is recommended to use the TUS endpoint for a better upload experience.**
                    example: https://origin.livepeer.com/api/asset/upload/direct?token=eyJhbGciOiJIUzI1NiJ9.eyJtc2ciOiJoZWxsbyBoYWNrZXIsIHRoZXJlJ3Mgbm90aGluZyBmb3IgeW91IGhlcmUg8J-YhiJ9.1YDjmXsqLcgNyMSzT4kXl_kIni46_EuGX_xfqmC7e0Q
                    type: string
                required:
                  - url
                  - tusEndpoint
                  - asset
                  - task
                type: object
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Upload an asset
      tags:
        - asset
      x-codeSamples:
        - label: requestUpload
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { TranscodeProfileEncoder, TranscodeProfileProfile, Type } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.create({
                name: "filename.mp4",
                staticMp4: true,
                playbackPolicy: {
                  type: Type.Webhook,
                  webhookId: "1bde4o2i6xycudoy",
                  webhookContext: {
                    "streamerId": "my-custom-id",
                  },
                  refreshInterval: 600,
                },
                profiles: [
                  {
                    width: 1280,
                    name: "720p",
                    bitrate: 3000000,
                    quality: 23,
                    fps: 30,
                    fpsDen: 1,
                    gop: "2",
                    profile: TranscodeProfileProfile.H264Baseline,
                    encoder: TranscodeProfileEncoder.H264,
                  },
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: requestUpload
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.NewAssetPayload{
                    Name: "filename.mp4",
                    PlaybackPolicy: &components.PlaybackPolicy{
                        RefreshInterval: livepeergo.Float64(600),
                        Type: components.TypeWebhook,
                        WebhookContext: map[string]any{
                            "streamerId": "my-custom-id",
                        },
                        WebhookID: livepeergo.String("1bde4o2i6xycudoy"),
                    },
                    Profiles: []components.TranscodeProfile{
                        components.TranscodeProfile{
                            Bitrate: 3000000,
                            Encoder: components.EncoderH264.ToPointer(),
                            Fps: livepeergo.Int64(30),
                            FpsDen: livepeergo.Int64(1),
                            Gop: livepeergo.String("2"),
                            Name: livepeergo.String("720p"),
                            Profile: components.ProfileH264Baseline.ToPointer(),
                            Quality: livepeergo.Int64(23),
                            Width: livepeergo.Int64(1280),
                        },
                    },
                    StaticMp4: livepeergo.Bool(true),
                }
                ctx := context.Background()
                res, err := s.Asset.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: requestUpload
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.create(request=components.NewAssetPayload(
                name='filename.mp4',
                static_mp4=True,
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /asset/upload/url:
    post:
      operationId: uploadAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-asset-from-url-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  asset:
                    $ref: '#/components/schemas/asset'
                  task:
                    additionalProperties: false
                    properties:
                      id:
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
                        type: string
                    required:
                      - id
                    type: object
                required:
                  - asset
                  - task
                type: object
                x-speakeasy-name-override: data
          description: Upload in progress
        "201":
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  asset:
                    $ref: '#/components/schemas/asset'
                  task:
                    additionalProperties: false
                    properties:
                      id:
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
                        type: string
                    required:
                      - id
                    type: object
                required:
                  - asset
                  - task
                type: object
                x-speakeasy-name-override: data
          description: Upload started
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Upload asset via URL
      tags:
        - asset
      x-codeSamples:
        - label: uploadAsset
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { TranscodeProfileEncoder, TranscodeProfileProfile, Type } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.asset.createViaUrl({
                name: "filename.mp4",
                staticMp4: true,
                playbackPolicy: {
                  type: Type.Webhook,
                  webhookId: "1bde4o2i6xycudoy",
                  webhookContext: {
                    "streamerId": "my-custom-id",
                  },
                  refreshInterval: 600,
                },
                url: "https://s3.amazonaws.com/my-bucket/path/filename.mp4",
                profiles: [
                  {
                    width: 1280,
                    name: "720p",
                    bitrate: 3000000,
                    quality: 23,
                    fps: 30,
                    fpsDen: 1,
                    gop: "2",
                    profile: TranscodeProfileProfile.H264Baseline,
                    encoder: TranscodeProfileEncoder.H264,
                  },
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: uploadAsset
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.NewAssetFromURLPayload{
                    Name: "filename.mp4",
                    PlaybackPolicy: &components.PlaybackPolicy{
                        RefreshInterval: livepeergo.Float64(600),
                        Type: components.TypeWebhook,
                        WebhookContext: map[string]any{
                            "streamerId": "my-custom-id",
                        },
                        WebhookID: livepeergo.String("1bde4o2i6xycudoy"),
                    },
                    Profiles: []components.TranscodeProfile{
                        components.TranscodeProfile{
                            Bitrate: 3000000,
                            Encoder: components.EncoderH264.ToPointer(),
                            Fps: livepeergo.Int64(30),
                            FpsDen: livepeergo.Int64(1),
                            Gop: livepeergo.String("2"),
                            Name: livepeergo.String("720p"),
                            Profile: components.ProfileH264Baseline.ToPointer(),
                            Quality: livepeergo.Int64(23),
                            Width: livepeergo.Int64(1280),
                        },
                    },
                    StaticMp4: livepeergo.Bool(true),
                    URL: "https://s3.amazonaws.com/my-bucket/path/filename.mp4",
                }
                ctx := context.Background()
                res, err := s.Asset.CreateViaURL(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONData != nil {
                    // handle response
                }
            }
        - label: uploadAsset
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.create_via_url(request=components.NewAssetFromURLPayload(
                name='filename.mp4',
                static_mp4=True,
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                url='https://s3.amazonaws.com/my-bucket/path/filename.mp4',
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.two_hundred_application_json_data is not None:
                # handle response
                pass
      x-speakeasy-name-override: createViaUrl
  /clip:
    post:
      operationId: createClip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clip-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  asset:
                    $ref: '#/components/schemas/asset'
                  task:
                    properties:
                      id:
                        example: 34d7618e-fd42-4798-acf5-19504616a11e
                        type: string
                    type: object
                required:
                  - asset
                  - task
                type: object
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a clip
      tags:
        - stream
      x-codeSamples:
        - label: createClip
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.createClip({
                playbackId: "eaw4nk06ts2d0mzb",
                startTime: 1587667174725,
                endTime: 1587667174725,
                name: "My Clip",
                sessionId: "de7818e7-610a-4057-8f6f-b785dc1e6f88",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: createClip
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.ClipPayload{
                    EndTime: livepeergo.Float64(1587667174725),
                    Name: livepeergo.String("My Clip"),
                    PlaybackID: "eaw4nk06ts2d0mzb",
                    SessionID: livepeergo.String("de7818e7-610a-4057-8f6f-b785dc1e6f88"),
                    StartTime: 1587667174725,
                }
                ctx := context.Background()
                res, err := s.Stream.CreateClip(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: createClip
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.create_clip(request=components.ClipPayload(
                playback_id='eaw4nk06ts2d0mzb',
                start_time=1587667174725,
                end_time=1587667174725,
                name='My Clip',
                session_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: createClip
  /data/usage/query:
    get:
      description: ""
      operationId: getUsageMetrics
      parameters:
        - description: |
            Start millis timestamp for the query range (inclusive)
          in: query
          name: from
          schema:
            type: integer
        - description: |
            End millis timestamp for the query range (exclusive)
          in: query
          name: to
          schema:
            type: integer
        - description: |
            The time step to aggregate viewership metrics by
          in: query
          name: timeStep
          schema:
            enum:
              - hour
              - day
            type: string
        - description: |
            The creator ID to filter the query results
          in: query
          name: creatorId
          schema:
            type: string
        - description: |
            The list of fields to break down the query results. Currently the
            only supported breakdown is by `creatorId`.
          in: query
          name: breakdownBy[]
          schema:
            items:
              enum:
                - creatorId
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage-metric'
                x-speakeasy-name-override: data
          description: A Usage Metric object
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Query usage metrics
      tags:
        - metrics
      x-codeSamples:
        - label: getUsageMetrics
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.metrics.getUsage({});

              // Handle the result
              console.log(result)
            }

            run();
        - label: getUsageMetrics
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetUsageMetricsRequest{}
                ctx := context.Background()
                res, err := s.Metrics.GetUsage(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UsageMetric != nil {
                    // handle response
                }
            }
        - label: getUsageMetrics
          lang: python
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_usage(request=operations.GetUsageMetricsRequest())

            if res.usage_metric is not None:
                # handle response
                pass
      x-speakeasy-name-override: getUsage
  /data/views/now:
    get:
      description: |
        Requires a private (non-CORS) API key to be used.
      operationId: getRealtimeViewershipNow
      parameters:
        - description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          in: query
          name: playbackId
          schema:
            type: string
        - description: The creator ID to filter the query results
          in: query
          name: creatorId
          schema:
            type: string
        - description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          in: query
          name: breakdownBy[]
          schema:
            items:
              enum:
                - playbackId
                - device
                - browser
                - country
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/realtime-viewership-metric'
                type: array
                x-speakeasy-name-override: data
          description: A list of Metric objects
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Query realtime viewership
      tags:
        - metrics
      x-speakeasy-name-override: getRealtimeViewership
  /data/views/query:
    get:
      description: |
        Requires a private (non-CORS) API key to be used.
      operationId: getViewershipMetrics
      parameters:
        - description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          in: query
          name: playbackId
          schema:
            type: string
        - description: Start timestamp for the query range (inclusive)
          in: query
          name: from
          schema:
            oneOf:
              - format: date-time
                type: string
              - type: integer
        - description: End timestamp for the query range (exclusive)
          in: query
          name: to
          schema:
            oneOf:
              - format: date-time
                type: string
              - type: integer
        - description: The time step to aggregate viewership metrics by
          in: query
          name: timeStep
          schema:
            enum:
              - hour
              - day
              - week
              - month
              - year
            type: string
        - description: The asset ID to filter metrics for
          in: query
          name: assetId
          schema:
            type: string
        - description: The stream ID to filter metrics for
          in: query
          name: streamId
          schema:
            type: string
        - description: The creator ID to filter the query results
          in: query
          name: creatorId
          schema:
            type: string
        - description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          in: query
          name: breakdownBy[]
          schema:
            items:
              enum:
                - playbackId
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - geohash
                - viewerId
                - creatorId
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/viewership-metric'
                type: array
                x-speakeasy-name-override: data
          description: A list of Metric objects
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Query viewership metrics
      tags:
        - metrics
      x-codeSamples:
        - label: getViewershipMetrics
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.metrics.getViewership({});

              // Handle the result
              console.log(result)
            }

            run();
        - label: getViewershipMetrics
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetViewershipMetricsRequest{}
                ctx := context.Background()
                res, err := s.Metrics.GetViewership(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getViewershipMetrics
          lang: python
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_viewership(request=operations.GetViewershipMetricsRequest())

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getViewership
  /data/views/query/creator:
    get:
      description: |
        Requires a proof of ownership to be sent in the request, which for now is just the assetId or streamId parameters (1 of those must be in the query-string).
      operationId: getCreatorViewershipMetrics
      parameters:
        - description: Start timestamp for the query range (inclusive)
          in: query
          name: from
          schema:
            oneOf:
              - format: date-time
                type: string
              - type: integer
        - description: End timestamp for the query range (exclusive)
          in: query
          name: to
          schema:
            oneOf:
              - format: date-time
                type: string
              - type: integer
        - description: The time step to aggregate viewership metrics by
          in: query
          name: timeStep
          schema:
            enum:
              - hour
              - day
              - week
              - month
              - year
            type: string
        - description: The asset ID to filter metrics for
          in: query
          name: assetId
          schema:
            type: string
        - description: The stream ID to filter metrics for
          in: query
          name: streamId
          schema:
            type: string
        - description: The creator ID to filter the query results
          in: query
          name: creatorId
          schema:
            type: string
        - description: |
            The list of fields to break down the query results. Specify this
            query-string multiple times to break down by multiple fields.
          in: query
          name: breakdownBy[]
          schema:
            items:
              enum:
                - deviceType
                - device
                - cpu
                - os
                - browser
                - browserEngine
                - continent
                - country
                - subdivision
                - timezone
                - viewerId
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/viewership-metric'
                type: array
                x-speakeasy-name-override: data
          description: A list of Metric objects
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Query creator viewership metrics
      tags:
        - metrics
      x-codeSamples:
        - label: getCreatorViewershipMetrics
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.metrics.getCreatorViewership({});

              // Handle the result
              console.log(result)
            }

            run();
        - label: getCreatorViewershipMetrics
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := operations.GetCreatorViewershipMetricsRequest{}
                ctx := context.Background()
                res, err := s.Metrics.GetCreatorViewership(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getCreatorViewershipMetrics
          lang: python
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_creator_viewership(request=operations.GetCreatorViewershipMetricsRequest())

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getCreatorViewership
  /data/views/query/total/{playbackId}:
    get:
      description: |
        Allows querying for the public metrics for viewership about a video.
        This can be called from the frontend with a CORS key, or even
        unauthenticated.
      operationId: getPublicViewershipMetrics
      parameters:
        - description: |
            The playback ID to filter the query results. This can be a canonical
            playback ID from Livepeer assets or streams, or dStorage identifiers
            for assets
          in: path
          name: playbackId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: |
                  A simplified metric object about aggregate viewership of an
                  asset. Either playbackId or dStorageUrl will be set.
                properties:
                  dStorageUrl:
                    $ref: '#/components/schemas/viewership-metric/properties/dStorageUrl'
                  playbackId:
                    $ref: '#/components/schemas/viewership-metric/properties/playbackId'
                  playtimeMins:
                    $ref: '#/components/schemas/viewership-metric/properties/playtimeMins'
                  viewCount:
                    $ref: '#/components/schemas/viewership-metric/properties/viewCount'
                type: object
                x-speakeasy-name-override: data
          description: A single Metric object with the viewCount and playtimeMins metrics.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Query public total views metrics
      tags:
        - metrics
      x-codeSamples:
        - label: getPublicViewershipMetrics
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.metrics.getPublicViewership("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getPublicViewershipMetrics
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var playbackID string = "<value>"
                ctx := context.Background()
                res, err := s.Metrics.GetPublicViewership(ctx, playbackID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getPublicViewershipMetrics
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_public_viewership(playback_id='<value>')

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getPublicViewership
  /multistream/target:
    get:
      operationId: getMultistreamTargets
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/multistream-target'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve Multistream Targets
      tags:
        - multistream
      x-codeSamples:
        - label: getMultistreamTargets
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.multistream.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getMultistreamTargets
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Multistream.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getMultistreamTargets
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
    post:
      operationId: createMultistreamTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multistream-target'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multistream-target'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a multistream target
      tags:
        - multistream
      x-codeSamples:
        - label: createMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.multistream.create({
                url: "rtmps://live.my-service.tv/channel/secretKey",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: createMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.MultistreamTargetInput{
                    URL: "rtmps://live.my-service.tv/channel/secretKey",
                }
                ctx := context.Background()
                res, err := s.Multistream.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.MultistreamTarget != nil {
                    // handle response
                }
            }
        - label: createMultistreamTarget
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.create(request=components.MultistreamTargetInput(
                url='rtmps://live.my-service.tv/channel/secretKey',
            ))

            if res.multistream_target is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /multistream/target/{id}:
    delete:
      description: |
        Make sure to remove any references to the target on existing
        streams before actually deleting it from the API.
      operationId: deleteMultistreamTarget
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete a multistream target
      tags:
        - multistream
      x-codeSamples:
        - label: deleteMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.multistream.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Multistream.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteMultistreamTarget
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.delete(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      operationId: getMultistreamTarget
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multistream-target'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a multistream target
      tags:
        - multistream
      x-codeSamples:
        - label: getMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.multistream.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Multistream.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.MultistreamTarget != nil {
                    // handle response
                }
            }
        - label: getMultistreamTarget
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.get(id='<value>')

            if res.multistream_target is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
    parameters:
      - description: ID of the multistream target
        in: path
        name: id
        required: true
        schema:
          type: string
    patch:
      operationId: updateMultistreamTarget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multistream-target-patch-payload'
        required: true
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Update Multistream Target
      tags:
        - multistream
      x-codeSamples:
        - label: updateMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.multistream.update("<value>", {
                url: "rtmps://live.my-service.tv/channel/secretKey",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                multistreamTargetPatchPayload := components.MultistreamTargetPatchPayload{
                    URL: "rtmps://live.my-service.tv/channel/secretKey",
                }
                ctx := context.Background()
                res, err := s.Multistream.Update(ctx, id, multistreamTargetPatchPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: updateMultistreamTarget
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.update(id='<value>', multistream_target_patch_payload=components.MultistreamTargetPatchPayload(
                url='rtmps://live.my-service.tv/channel/secretKey',
            ))

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: update
  /playback/{id}:
    get:
      operationId: getPlaybackInfo
      parameters:
        - description: The playback ID from the asset or livestream, e.g. `eaw4nk06ts2d0mzb`.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/playback-info'
                x-speakeasy-name-override: data
          description: Successful response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Playback not found
      summary: Retrieve Playback Info
      tags:
        - playback
      x-codeSamples:
        - label: getPlaybackInfo
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.playback.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getPlaybackInfo
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Playback.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PlaybackInfo != nil {
                    // handle response
                }
            }
        - label: getPlaybackInfo
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.playback.get(id='<value>')

            if res.playback_info is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
  /room:
    post:
      deprecated: true
      description: |
        Create a multiparticipant livestreaming room.
      operationId: createRoom
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-room-response'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a room
      tags:
        - room
      x-codeSamples:
        - label: createRoom
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.create();

              // Handle the result
              console.log(result)
            }

            run();
        - label: createRoom
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Room.Create(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CreateRoomResponse != nil {
                    // handle response
                }
            }
        - label: createRoom
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.create()

            if res.create_room_response is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /room/{id}:
    delete:
      deprecated: true
      operationId: deleteRoom
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete a room
      tags:
        - room
      x-codeSamples:
        - label: deleteRoom
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteRoom
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Room.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteRoom
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.delete(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      deprecated: true
      operationId: getRoom
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a room
      tags:
        - room
      x-codeSamples:
        - label: getRoom
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getRoom
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Room.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Room != nil {
                    // handle response
                }
            }
        - label: getRoom
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.get(id='<value>')

            if res.room is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
  /room/{id}/egress:
    delete:
      deprecated: true
      operationId: stopRoomEgress
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Stop room RTMP egress
      tags:
        - room
      x-codeSamples:
        - label: stopRoomEgress
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.stopEgress("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: stopRoomEgress
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Room.StopEgress(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: stopRoomEgress
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.stop_egress(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: stopEgress
    post:
      deprecated: true
      description: |
        Create a livestream for your room.
        This allows you to leverage livestreaming features like recording and HLS output.
      operationId: startRoomEgress
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/room-egress-payload'
        required: true
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Start room RTMP egress
      tags:
        - room
      x-codeSamples:
        - label: startRoomEgress
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.startEgress("<value>", {
                streamId: "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: startRoomEgress
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                roomEgressPayload := components.RoomEgressPayload{
                    StreamID: "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
                }
                ctx := context.Background()
                res, err := s.Room.StartEgress(ctx, id, roomEgressPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: startRoomEgress
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.start_egress(id='<value>', room_egress_payload=components.RoomEgressPayload(
                stream_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
            ))

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: startEgress
  /room/{id}/user:
    post:
      deprecated: true
      description: |
        Call this endpoint to add a user to a room, specifying a display name at a minimum.
        The response will contain a joining URL for Livepeer's default meeting app.
        Alternatively the joining token can be used with a custom app.
      operationId: createRoomUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/room-user-payload'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room-user-response'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a room user
      tags:
        - room
      x-codeSamples:
        - label: createRoomUser
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.createUser("<value>", {
                name: "name",
                canPublish: true,
                canPublishData: true,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: createRoomUser
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                roomUserPayload := components.RoomUserPayload{
                    CanPublish: livepeergo.Bool(true),
                    CanPublishData: livepeergo.Bool(true),
                    Name: "name",
                }
                ctx := context.Background()
                res, err := s.Room.CreateUser(ctx, id, roomUserPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res.RoomUserResponse != nil {
                    // handle response
                }
            }
        - label: createRoomUser
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.create_user(id='<value>', room_user_payload=components.RoomUserPayload(
                name='name',
                can_publish=True,
                can_publish_data=True,
            ))

            if res.room_user_response is not None:
                # handle response
                pass
      x-speakeasy-name-override: createUser
  /room/{id}/user/{userId}:
    delete:
      deprecated: true
      operationId: deleteRoomUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Remove a user from the room
      tags:
        - room
      x-codeSamples:
        - label: deleteRoomUser
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.deleteUser("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteRoomUser
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var userID string = "<value>"
                ctx := context.Background()
                res, err := s.Room.DeleteUser(ctx, id, userID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteRoomUser
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.delete_user(id='<value>', user_id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: deleteUser
    get:
      deprecated: true
      operationId: getRoomUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-room-user-response'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Get user details
      tags:
        - room
      x-codeSamples:
        - label: getRoomUser
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.getUser("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getRoomUser
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var userID string = "<value>"
                ctx := context.Background()
                res, err := s.Room.GetUser(ctx, id, userID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.GetRoomUserResponse != nil {
                    // handle response
                }
            }
        - label: getRoomUser
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.get_user(id='<value>', user_id='<value>')

            if res.get_room_user_response is not None:
                # handle response
                pass
      x-speakeasy-name-override: getUser
    put:
      deprecated: true
      description: Update properties for a user.
      operationId: updateRoomUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/room-user-update-payload'
        required: true
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Update a room user
      tags:
        - room
      x-codeSamples:
        - label: updateRoomUser
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.room.updateUser("<value>", "<value>", {
                canPublish: true,
                canPublishData: true,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateRoomUser
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var userID string = "<value>"

                roomUserUpdatePayload := components.RoomUserUpdatePayload{
                    CanPublish: livepeergo.Bool(true),
                    CanPublishData: livepeergo.Bool(true),
                }
                ctx := context.Background()
                res, err := s.Room.UpdateUser(ctx, id, userID, roomUserUpdatePayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: updateRoomUser
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.update_user(id='<value>', user_id='<value>', room_user_update_payload=components.RoomUserUpdatePayload(
                can_publish=True,
                can_publish_data=True,
            ))

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: updateUser
  /session:
    get:
      operationId: getSessions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/session'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve sessions
      tags:
        - session
      x-codeSamples:
        - label: getSessions
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.session.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSessions
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Session.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getSessions
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
  /session/{id}:
    get:
      operationId: getSession
      parameters:
        - description: ID of the session
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/session'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a session
      tags:
        - session
      x-codeSamples:
        - label: getSession
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.session.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSession
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Session.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Session != nil {
                    // handle response
                }
            }
        - label: getSession
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get(id='<value>')

            if res.session is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
  /session/{id}/clips:
    get:
      operationId: getSessionClips
      parameters:
        - description: ID of the parent session
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/asset'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve clips of a session
      tags:
        - session
      x-codeSamples:
        - label: getSessionClips
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.session.getClips("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getSessionClips
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Session.GetClips(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getSessionClips
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_clips(id='<value>')

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getClips
  /stream:
    get:
      operationId: getStreams
      parameters:
        - in: query
          name: streamsonly
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/stream'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve streams
      tags:
        - stream
      x-codeSamples:
        - label: getStreams
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.getAll("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getStreams
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var streamsonly *string = livepeergo.String("<value>")
                ctx := context.Background()
                res, err := s.Stream.GetAll(ctx, streamsonly)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getStreams
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get_all(streamsonly='<value>')

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
    post:
      description: |
        The only parameter you are required to set is the name of your stream,
        but we also highly recommend that you define transcoding profiles
        parameter that suits your specific broadcasting configuration.
        \
        \
        If you do not define transcoding rendition profiles when creating the
        stream, a default set of profiles will be used. These profiles include
        240p,  360p, 480p and 720p.
        \
        \
        The playback policy is set to public by default for new streams. It can
        also be added upon the creation of a new stream by adding
        `"playbackPolicy": {"type": "jwt"}`
      operationId: createStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-stream-payload'
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stream'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a stream
      tags:
        - stream
      x-codeSamples:
        - label: createStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { Profile, Type } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.create({
                name: "test_stream",
                pull: {
                  source: "https://myservice.com/live/stream.flv",
                  headers: {
                    "Authorization": "Bearer 123",
                  },
                  location: {
                    lat: 39.739,
                    lon: -104.988,
                  },
                },
                playbackPolicy: {
                  type: Type.Webhook,
                  webhookId: "1bde4o2i6xycudoy",
                  webhookContext: {
                    "streamerId": "my-custom-id",
                  },
                  refreshInterval: 600,
                },
                profiles: [
                  {
                    width: 1280,
                    name: "720p",
                    height: 486589,
                    bitrate: 3000000,
                    fps: 30,
                    fpsDen: 1,
                    quality: 23,
                    gop: "2",
                    profile: Profile.H264Baseline,
                  },
                ],
                record: false,
                recordingSpec: {
                  profiles: [
                    {
                      width: 1280,
                      name: "720p",
                      height: 489382,
                      bitrate: 3000000,
                      fps: 30,
                      fpsDen: 1,
                      quality: 23,
                      gop: "2",
                      profile: Profile.H264Baseline,
                    },
                  ],
                },
                multistream: {
                  targets: [
                    {
                      profile: "720p",
                      videoOnly: false,
                      id: "PUSH123",
                      spec: {
                        name: "My target",
                        url: "rtmps://live.my-service.tv/channel/secretKey",
                      },
                    },
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: createStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.NewStreamPayload{
                    Multistream: &components.Multistream{
                        Targets: []components.Target{
                            components.Target{
                                ID: livepeergo.String("PUSH123"),
                                Profile: "720p",
                                Spec: &components.TargetSpec{
                                    Name: livepeergo.String("My target"),
                                    URL: "rtmps://live.my-service.tv/channel/secretKey",
                                },
                                VideoOnly: livepeergo.Bool(false),
                            },
                        },
                    },
                    Name: "test_stream",
                    PlaybackPolicy: &components.PlaybackPolicy{
                        RefreshInterval: livepeergo.Float64(600),
                        Type: components.TypeWebhook,
                        WebhookContext: map[string]any{
                            "streamerId": "my-custom-id",
                        },
                        WebhookID: livepeergo.String("1bde4o2i6xycudoy"),
                    },
                    Profiles: []components.FfmpegProfile{
                        components.FfmpegProfile{
                            Bitrate: 3000000,
                            Fps: 30,
                            FpsDen: livepeergo.Int64(1),
                            Gop: livepeergo.String("2"),
                            Height: 486589,
                            Name: "720p",
                            Profile: components.FfmpegProfileProfileH264Baseline.ToPointer(),
                            Quality: livepeergo.Int64(23),
                            Width: 1280,
                        },
                    },
                    Pull: &components.Pull{
                        Headers: map[string]string{
                            "Authorization": "Bearer 123",
                        },
                        Location: &components.Location{
                            Lat: 39.739,
                            Lon: -104.988,
                        },
                        Source: "https://myservice.com/live/stream.flv",
                    },
                    Record: livepeergo.Bool(false),
                    RecordingSpec: &components.NewStreamPayloadRecordingSpec{
                        Profiles: []components.TranscodeProfile{
                            components.TranscodeProfile{
                                Bitrate: 3000000,
                                Encoder: components.EncoderH264.ToPointer(),
                                Fps: livepeergo.Int64(30),
                                FpsDen: livepeergo.Int64(1),
                                Gop: livepeergo.String("2"),
                                Name: livepeergo.String("720p"),
                                Profile: components.ProfileH264Baseline.ToPointer(),
                                Quality: livepeergo.Int64(23),
                                Width: livepeergo.Int64(1280),
                            },
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Stream.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Stream != nil {
                    // handle response
                }
            }
        - label: createStream
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.create(request=components.NewStreamPayload(
                name='test_stream',
                pull=components.Pull(
                    source='https://myservice.com/live/stream.flv',
                    headers={
                        'Authorization': 'Bearer 123',
                    },
                    location=components.Location(
                        lat=39.739,
                        lon=-104.988,
                    ),
                ),
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.FfmpegProfile(
                        width=1280,
                        name='720p',
                        height=486589,
                        bitrate=3000000,
                        fps=30,
                        fps_den=1,
                        quality=23,
                        gop='2',
                        profile=components.Profile.H264_BASELINE,
                    ),
                ],
                record=False,
                recording_spec=components.NewStreamPayloadRecordingSpec(
                    profiles=[
                        components.TranscodeProfile(
                            width=1280,
                            name='720p',
                            bitrate=3000000,
                            quality=23,
                            fps=30,
                            fps_den=1,
                            gop='2',
                            profile=components.TranscodeProfileProfile.H264_BASELINE,
                            encoder=components.TranscodeProfileEncoder.H_264,
                        ),
                    ],
                ),
                multistream=components.Multistream(
                    targets=[
                        components.Target(
                            profile='720p',
                            video_only=False,
                            id='PUSH123',
                            spec=components.TargetSpec(
                                name='My target',
                                url='rtmps://live.my-service.tv/channel/secretKey',
                            ),
                        ),
                    ],
                ),
            ))

            if res.stream is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /stream/{id}:
    delete:
      description: |
        This will also suspend any active stream sessions, so make sure to wait
        until the stream has finished. To explicitly interrupt an active
        session, consider instead updating the suspended field in the stream
        using the PATCH stream API.
      operationId: deleteStream
      parameters:
        - description: ID of the stream
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete a stream
      tags:
        - stream
      x-codeSamples:
        - label: deleteStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: deleteStream
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.delete(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      operationId: getStream
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stream'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a stream
      tags:
        - stream
      x-codeSamples:
        - label: getStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Stream != nil {
                    // handle response
                }
            }
        - label: getStream
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get(id='<value>')

            if res.stream is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
    parameters:
      - description: ID of the stream
        in: path
        name: id
        required: true
        schema:
          type: string
    patch:
      operationId: updateStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stream-patch-payload'
        required: true
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Update a stream
      tags:
        - stream
      x-codeSamples:
        - label: updateStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { Profile, Type } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.update("<value>", {
                record: false,
                multistream: {
                  targets: [
                    {
                      profile: "720p",
                      videoOnly: false,
                      id: "PUSH123",
                      spec: {
                        name: "My target",
                        url: "rtmps://live.my-service.tv/channel/secretKey",
                      },
                    },
                  ],
                },
                playbackPolicy: {
                  type: Type.Webhook,
                  webhookId: "1bde4o2i6xycudoy",
                  webhookContext: {
                    "streamerId": "my-custom-id",
                  },
                  refreshInterval: 600,
                },
                profiles: [
                  {
                    width: 1280,
                    name: "720p",
                    height: 857478,
                    bitrate: 3000000,
                    fps: 30,
                    fpsDen: 1,
                    quality: 23,
                    gop: "2",
                    profile: Profile.H264Baseline,
                  },
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                streamPatchPayload := components.StreamPatchPayload{
                    Multistream: &components.Multistream{
                        Targets: []components.Target{
                            components.Target{
                                ID: livepeergo.String("PUSH123"),
                                Profile: "720p",
                                Spec: &components.TargetSpec{
                                    Name: livepeergo.String("My target"),
                                    URL: "rtmps://live.my-service.tv/channel/secretKey",
                                },
                                VideoOnly: livepeergo.Bool(false),
                            },
                        },
                    },
                    PlaybackPolicy: &components.PlaybackPolicy{
                        RefreshInterval: livepeergo.Float64(600),
                        Type: components.TypeWebhook,
                        WebhookContext: map[string]any{
                            "streamerId": "my-custom-id",
                        },
                        WebhookID: livepeergo.String("1bde4o2i6xycudoy"),
                    },
                    Profiles: []components.FfmpegProfile{
                        components.FfmpegProfile{
                            Bitrate: 3000000,
                            Fps: 30,
                            FpsDen: livepeergo.Int64(1),
                            Gop: livepeergo.String("2"),
                            Height: 857478,
                            Name: "720p",
                            Profile: components.FfmpegProfileProfileH264Baseline.ToPointer(),
                            Quality: livepeergo.Int64(23),
                            Width: 1280,
                        },
                    },
                    Record: livepeergo.Bool(false),
                    RecordingSpec: &components.RecordingSpec{
                        Profiles: []components.TranscodeProfile{
                            components.TranscodeProfile{
                                Bitrate: 3000000,
                                Encoder: components.EncoderH264.ToPointer(),
                                Fps: livepeergo.Int64(30),
                                FpsDen: livepeergo.Int64(1),
                                Gop: livepeergo.String("2"),
                                Name: livepeergo.String("720p"),
                                Profile: components.ProfileH264Baseline.ToPointer(),
                                Quality: livepeergo.Int64(23),
                                Width: livepeergo.Int64(1280),
                            },
                        },
                    },
                }
                ctx := context.Background()
                res, err := s.Stream.Update(ctx, id, streamPatchPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: updateStream
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.update(id='<value>', stream_patch_payload=components.StreamPatchPayload(
                record=False,
                multistream=components.Multistream(
                    targets=[
                        components.Target(
                            profile='720p',
                            video_only=False,
                            id='PUSH123',
                            spec=components.TargetSpec(
                                name='My target',
                                url='rtmps://live.my-service.tv/channel/secretKey',
                            ),
                        ),
                    ],
                ),
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.FfmpegProfile(
                        width=1280,
                        name='720p',
                        height=857478,
                        bitrate=3000000,
                        fps=30,
                        fps_den=1,
                        quality=23,
                        gop='2',
                        profile=components.Profile.H264_BASELINE,
                    ),
                ],
                recording_spec=components.RecordingSpec(
                    profiles=[
                        components.TranscodeProfile(
                            width=1280,
                            name='720p',
                            bitrate=3000000,
                            quality=23,
                            fps=30,
                            fps_den=1,
                            gop='2',
                            profile=components.TranscodeProfileProfile.H264_BASELINE,
                            encoder=components.TranscodeProfileEncoder.H_264,
                        ),
                    ],
                ),
            ))

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: update
  /stream/{id}/clips:
    get:
      operationId: getClips
      parameters:
        - description: ID of the parent stream or playbackId of parent stream
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/asset'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve clips of a livestream
      tags:
        - stream
      x-codeSamples:
        - label: getClips
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.getClips("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getClips
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.GetClips(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getClips
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get_clips(id='<value>')

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getClips
  /stream/{id}/create-multistream-target:
    post:
      operationId: addMultistreamTarget
      parameters:
        - description: ID of the parent stream
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/target-add-payload'
        required: true
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Add a multistream target
      tags:
        - stream
      x-codeSamples:
        - label: addMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.addMultistreamTarget("<value>", {
                profile: "720p0",
                videoOnly: false,
                id: "PUSH123",
                spec: {
                  name: "My target",
                  url: "rtmps://live.my-service.tv/channel/secretKey",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: addMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                targetAddPayload := components.TargetAddPayload{
                    ID: livepeergo.String("PUSH123"),
                    Profile: "720p0",
                    Spec: &components.TargetAddPayloadSpec{
                        Name: livepeergo.String("My target"),
                        URL: "rtmps://live.my-service.tv/channel/secretKey",
                    },
                    VideoOnly: livepeergo.Bool(false),
                }
                ctx := context.Background()
                res, err := s.Stream.AddMultistreamTarget(ctx, id, targetAddPayload)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: addMultistreamTarget
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.add_multistream_target(id='<value>', target_add_payload=components.TargetAddPayload(
                profile='720p0',
                video_only=False,
                id='PUSH123',
                spec=components.TargetAddPayloadSpec(
                    name='My target',
                    url='rtmps://live.my-service.tv/channel/secretKey',
                ),
            ))

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: addMultistreamTarget
  /stream/{id}/multistream/{targetId}:
    delete:
      operationId: removeMultistreamTarget
      parameters:
        - description: ID of the parent stream
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: ID of the multistream target
          in: path
          name: targetId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Success (No content)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Remove a multistream target
      tags:
        - stream
      x-codeSamples:
        - label: removeMultistreamTarget
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.removeMultistreamTarget("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: removeMultistreamTarget
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var targetID string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.RemoveMultistreamTarget(ctx, id, targetID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: removeMultistreamTarget
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.remove_multistream_target(id='<value>', target_id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: removeMultistreamTarget
  /stream/{id}/start-pull:
    parameters:
      - description: ID of the stream
        in: path
        name: id
        required: true
        schema:
          type: string
    post:
      description: |
        `POST /stream/{id}/start-pull` can be used to start ingest for a stream
        configured with a pull source. If the stream has recording configured,
        it will also start recording.
        \
        \
        A 204 No Content status response indicates the stream was successfully
        started.
      operationId: startPullStream
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Start ingest for a pull stream
      tags:
        - stream
      x-codeSamples:
        - label: startPullStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.startPull("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: startPullStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.StartPull(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: startPullStream
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.start_pull(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: startPull
  /stream/{id}/terminate:
    delete:
      description: |
        `DELETE /stream/{id}/terminate` can be used to terminate an ongoing
        session on a live stream. Unlike suspending the stream, it allows the
        streamer to restart streaming even immediately, but it will force
        terminate the current session and stop the recording.
        \
        \
        A 204 No Content status response indicates the stream was successfully
        terminated.
      operationId: terminateStream
      responses:
        "204":
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Terminates a live stream
      tags:
        - stream
      x-codeSamples:
        - label: terminateStream
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.stream.terminate("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: terminateStream
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Stream.Terminate(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - label: terminateStream
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.terminate(id='<value>')

            if res is not None:
                # handle response
                pass
      x-speakeasy-name-override: terminate
    parameters:
      - description: ID of the stream
        in: path
        name: id
        required: true
        schema:
          type: string
  /stream/{parentId}/sessions:
    get:
      operationId: getRecordedSessions
      parameters:
        - description: ID of the parent stream
          in: path
          name: parentId
          required: true
          schema:
            type: string
        - description: |
            Flag indicating if the response should only include recorded
            sessions
          in: query
          name: record
          schema:
            example: true
            oneOf:
              - type: boolean
              - type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/session'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve Recorded Sessions
      tags:
        - session
      x-codeSamples:
        - label: getRecordedSessions
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.session.getRecorded("<value>", true);

              // Handle the result
              console.log(result)
            }

            run();
        - label: getRecordedSessions
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var parentID string = "<value>"

                var record *operations.Record = operations.CreateRecordBoolean(
                true,
                )
                ctx := context.Background()
                res, err := s.Session.GetRecorded(ctx, parentID, record)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getRecordedSessions
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_recorded(parent_id='<value>', record=True)

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getRecorded
  /task:
    get:
      operationId: getTasks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/task'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve Tasks
      tags:
        - task
      x-codeSamples:
        - label: getTasks
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.task.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getTasks
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Task.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getTasks
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.task.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
  /task/{taskId}:
    get:
      operationId: getTask
      parameters:
        - description: ID of the task
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
                x-speakeasy-name-override: data
          description: Success
        default:
          description: Error
      summary: Retrieve a Task
      tags:
        - task
      x-codeSamples:
        - label: getTask
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.task.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getTask
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var taskID string = "<value>"
                ctx := context.Background()
                res, err := s.Task.Get(ctx, taskID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Task != nil {
                    // handle response
                }
            }
        - label: getTask
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.task.get(task_id='<value>')

            if res.task is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
  /transcode:
    post:
      description: |
        `POST /transcode` transcodes a video file and uploads the results to the
        specified storage service.
        \
        \
        Transcoding is asynchronous so you will need to check the status of the
        task in order to determine when transcoding is complete. The `id` field
        in the response is the unique ID for the transcoding `Task`. The task
        status can be queried using the [GET tasks
        endpoint](https://docs.livepeer.org/reference/api/get-tasks):
        \
        \
        When `status.phase` is `completed`,  transcoding will be complete and
        the results will be stored in the storage service and the specified
        output location.
        \
        \
        The results will be available under `params.outputs.hls.path` and
        `params.outputs.mp4.path` in the specified storage service.
        ## Input
        \
        This endpoint currently supports the following inputs:
        - HTTP
        - S3 API Compatible Service
        \
        \
        **HTTP**
        \
        A public HTTP URL can be used to read a video file.
        ```json
        {
            "url": "https://www.example.com/video.mp4"
        }
        ```
        | Name | Type   | Description                          |
        | ---- | ------ | ------------------------------------ |
        | url  | string | A public HTTP URL for the video file. |

        Note: For IPFS HTTP gateway URLs, the API currently only supports “path
        style” URLs and does not support “subdomain style” URLs. The API will
        support both styles of URLs in a future update.
        \
        \
        **S3 API Compatible Service**
        \
        \
        S3 credentials can be used to authenticate with a S3 API compatible
        service to read a video file.

        ```json
        {
            "type": "s3",
            "endpoint": "https://gateway.storjshare.io",
            "credentials": {
                "accessKeyId": "$ACCESS_KEY_ID",
                "secretAccessKey": "$SECRET_ACCESS_KEY"
            },
            "bucket": "inbucket",
            "path": "/video/source.mp4"
        }
        ```


        ## Storage
        \
        This endpoint currently supports the following storage services:
        - S3 API Compatible Service
        - Web3 Storage
        \
        \
        **S3 API Compatible Service**
        ```json
        {
          "type": "s3",
            "endpoint": "https://gateway.storjshare.io",
            "credentials": {
                "accessKeyId": "$ACCESS_KEY_ID",
                "secretAccessKey": "$SECRET_ACCESS_KEY"
            },
            "bucket": "mybucket"
        }
        ```

        **Web3 Storage**

        ```json
        {
          "type": "web3.storage",
            "credentials": {
                "proof": "$UCAN_DELEGATION_PROOF",
            }
        }
        ```



        ## Outputs
        \
        This endpoint currently supports the following output types:
        - HLS
        - MP4

        **HLS**

        ```json
        {
          "hls": {
                "path": "/samplevideo/hls"
            }
        }
        ```


        **MP4**

        ```json
        {
          "mp4": {
                "path": "/samplevideo/mp4"
            }
        }
        ```
      operationId: transcodeVideo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transcode-payload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Transcode a video
      tags:
        - transcode
      x-codeSamples:
        - label: transcodeVideo
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { TranscodePayloadSchemasType, TranscodeProfileEncoder, TranscodeProfileProfile } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.transcode.create({
              input:     {
                    url: "https://s3.amazonaws.com/bucket/file.mp4",
                  },
              storage:     {
                    type: TranscodePayloadSchemasType.S3,
                    endpoint: "https://gateway.storjshare.io",
                    bucket: "outputbucket",
                    credentials: {
                      accessKeyId: "AKIAIOSFODNN7EXAMPLE",
                      secretAccessKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                    },
                  },
                outputs: {
                  hls: {
                    path: "/samplevideo/hls",
                  },
                  mp4: {
                    path: "/samplevideo/mp4",
                  },
                  fmp4: {
                    path: "/samplevideo/fmp4",
                  },
                },
                profiles: [
                  {
                    width: 1280,
                    name: "720p",
                    bitrate: 3000000,
                    quality: 23,
                    fps: 30,
                    fpsDen: 1,
                    gop: "2",
                    profile: TranscodeProfileProfile.H264Baseline,
                    encoder: TranscodeProfileEncoder.H264,
                  },
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: transcodeVideo
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.TranscodePayload{
                    Input: components.CreateInputInput1(
                            components.Input1{
                                URL: "https://s3.amazonaws.com/bucket/file.mp4",
                            },
                    ),
                    Outputs: components.Outputs{
                        Fmp4: &components.Fmp4{
                            Path: "/samplevideo/fmp4",
                        },
                        Hls: &components.Hls{
                            Path: "/samplevideo/hls",
                        },
                        Mp4: &components.Mp4{
                            Path: "/samplevideo/mp4",
                        },
                    },
                    Profiles: []components.TranscodeProfile{
                        components.TranscodeProfile{
                            Bitrate: 3000000,
                            Encoder: components.EncoderH264.ToPointer(),
                            Fps: livepeergo.Int64(30),
                            FpsDen: livepeergo.Int64(1),
                            Gop: livepeergo.String("2"),
                            Name: livepeergo.String("720p"),
                            Profile: components.ProfileH264Baseline.ToPointer(),
                            Quality: livepeergo.Int64(23),
                            Width: livepeergo.Int64(1280),
                        },
                    },
                    Storage: components.CreateTranscodePayloadStorageStorage1(
                            components.Storage1{
                                Bucket: "outputbucket",
                                Credentials: components.StorageCredentials{
                                    AccessKeyID: "AKIAIOSFODNN7EXAMPLE",
                                    SecretAccessKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                                },
                                Endpoint: "https://gateway.storjshare.io",
                                Type: components.StorageTypeS3,
                            },
                    ),
                }
                ctx := context.Background()
                res, err := s.Transcode.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Task != nil {
                    // handle response
                }
            }
        - label: transcodeVideo
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.transcode.create(request=components.TranscodePayload(
                input=components.Input1(
                    url='https://s3.amazonaws.com/bucket/file.mp4',
                ),
                storage=components.Storage1(
                    type=components.StorageType.S3,
                    endpoint='https://gateway.storjshare.io',
                    bucket='outputbucket',
                    credentials=components.StorageCredentials(
                        access_key_id='AKIAIOSFODNN7EXAMPLE',
                        secret_access_key='wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
                    ),
                ),
                outputs=components.Outputs(
                    hls=components.Hls(
                        path='/samplevideo/hls',
                    ),
                    mp4=components.Mp4(
                        path='/samplevideo/mp4',
                    ),
                    fmp4=components.Fmp4(
                        path='/samplevideo/fmp4',
                    ),
                ),
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.task is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /webhook:
    get:
      operationId: getWebhooks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/webhook'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a Webhook
      tags:
        - webhook
      x-codeSamples:
        - label: getWebhooks
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.getAll();

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWebhooks
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhook.GetAll(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getWebhooks
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_all()

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getAll
    post:
      description: |
        To create a new webhook, you need to make an API call with the events you want to listen for and the URL that will be called when those events occur.
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Create a webhook
      tags:
        - webhook
      x-codeSamples:
        - label: createWebhook
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { Events } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.create({
                name: "test_webhook",
                projectId: "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
                events: [
                  Events.StreamStarted,
                  Events.StreamIdle,
                ],
                url: "https://my-service.com/webhook",
                sharedSecret: "my-secret",
                streamId: "de7818e7-610a-4057-8f6f-b785dc1e6f88",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: createWebhook
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                request := components.WebhookInput{
                    Events: []components.Events{
                        components.EventsStreamStarted,
                        components.EventsStreamIdle,
                    },
                    Name: "test_webhook",
                    ProjectID: livepeergo.String("aac12556-4d65-4d34-9fb6-d1f0985eb0a9"),
                    SharedSecret: livepeergo.String("my-secret"),
                    StreamID: livepeergo.String("de7818e7-610a-4057-8f6f-b785dc1e6f88"),
                    URL: "https://my-service.com/webhook",
                }
                ctx := context.Background()
                res, err := s.Webhook.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Webhook != nil {
                    // handle response
                }
            }
        - label: createWebhook
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.create(request=components.WebhookInput(
                name='test_webhook',
                project_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
                events=[
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                url='https://my-service.com/webhook',
                shared_secret='my-secret',
                stream_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.webhook is not None:
                # handle response
                pass
      x-speakeasy-name-override: create
  /webhook/{id}:
    delete:
      operationId: deleteWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Delete a webhook
      tags:
        - webhook
      x-codeSamples:
        - label: deleteWebhook
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.delete("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: deleteWebhook
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhook.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Webhook != nil {
                    // handle response
                }
            }
        - label: deleteWebhook
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.delete(id='<value>')

            if res.webhook is not None:
                # handle response
                pass
      x-speakeasy-name-override: delete
    get:
      operationId: getWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a webhook
      tags:
        - webhook
      x-codeSamples:
        - label: getWebhook
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.get("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWebhook
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhook.Get(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Webhook != nil {
                    // handle response
                }
            }
        - label: getWebhook
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get(id='<value>')

            if res.webhook is not None:
                # handle response
                pass
      x-speakeasy-name-override: get
    put:
      operationId: updateWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Update a webhook
      tags:
        - webhook
      x-codeSamples:
        - label: updateWebhook
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";
            import { Events } from "livepeer/models/components";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.update("<value>", {
                name: "test_webhook",
                projectId: "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
                events: [
                  Events.StreamStarted,
                  Events.StreamIdle,
                ],
                url: "https://my-service.com/webhook",
                sharedSecret: "my-secret",
                streamId: "de7818e7-610a-4057-8f6f-b785dc1e6f88",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - label: updateWebhook
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"github.com/livepeer/livepeer-go/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                webhook := components.WebhookInput{
                    Events: []components.Events{
                        components.EventsStreamStarted,
                        components.EventsStreamIdle,
                    },
                    Name: "test_webhook",
                    ProjectID: livepeergo.String("aac12556-4d65-4d34-9fb6-d1f0985eb0a9"),
                    SharedSecret: livepeergo.String("my-secret"),
                    StreamID: livepeergo.String("de7818e7-610a-4057-8f6f-b785dc1e6f88"),
                    URL: "https://my-service.com/webhook",
                }
                ctx := context.Background()
                res, err := s.Webhook.Update(ctx, id, webhook)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Webhook != nil {
                    // handle response
                }
            }
        - label: updateWebhook
          lang: python
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.update(id='<value>', webhook=components.WebhookInput(
                name='test_webhook',
                project_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
                events=[
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                url='https://my-service.com/webhook',
                shared_secret='my-secret',
                stream_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.webhook is not None:
                # handle response
                pass
      x-speakeasy-name-override: update
  /webhook/{id}/log:
    get:
      operationId: getWebhookLogs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/webhook-log'
                type: array
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve webhook logs
      tags:
        - webhook
      x-codeSamples:
        - label: getWebhookLogs
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.getLogs("<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWebhookLogs
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhook.GetLogs(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Data != nil {
                    // handle response
                }
            }
        - label: getWebhookLogs
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_logs(id='<value>')

            if res.data is not None:
                # handle response
                pass
      x-speakeasy-name-override: getLogs
  /webhook/{id}/log/{logId}:
    get:
      operationId: getWebhookLog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: logId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-log'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Retrieve a webhook log
      tags:
        - webhook
      x-codeSamples:
        - label: getWebhookLog
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.getLog("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: getWebhookLog
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var logID string = "<value>"
                ctx := context.Background()
                res, err := s.Webhook.GetLog(ctx, id, logID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookLog != nil {
                    // handle response
                }
            }
        - label: getWebhookLog
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_log(id='<value>', log_id='<value>')

            if res.webhook_log is not None:
                # handle response
                pass
      x-speakeasy-name-override: getLog
  /webhook/{id}/log/{logId}/resend:
    post:
      description: |
        Use this API to resend the same webhook request. This is useful when
        developing and debugging, allowing you to easily repeat the same webhook
        to check or fix the behaviour in your handler.
      operationId: resendWebhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: logId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-log'
                x-speakeasy-name-override: data
          description: Success
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error
      summary: Resend a webhook
      tags:
        - webhook
      x-codeSamples:
        - label: resendWebhook
          lang: typescript
          source: |-
            import { Livepeer } from "livepeer";

            const livepeer = new Livepeer({
              apiKey: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await livepeer.webhook.resendLog("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
        - label: resendWebhook
          lang: go
          source: |-
            package main

            import(
            	livepeergo "github.com/livepeer/livepeer-go"
            	"context"
            	"log"
            )

            func main() {
                s := livepeergo.New(
                    livepeergo.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
                )
                var id string = "<value>"

                var logID string = "<value>"
                ctx := context.Background()
                res, err := s.Webhook.ResendLog(ctx, id, logID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookLog != nil {
                    // handle response
                }
            }
        - label: resendWebhook
          lang: python
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.resend_log(id='<value>', log_id='<value>')

            if res.webhook_log is not None:
                # handle response
                pass
      x-speakeasy-name-override: resendLog
security:
  - apiKey: []
servers:
  - url: https://livepeer.studio/api
tags:
  - description: Operations related to livestream api
    name: stream
  - description: Operations related to asset/vod api
    name: asset
  - description: Operations related to webhook api
    name: webhook
  - description: Operations related to multistream api
    name: multistream
  - description: Operations related to session api
    name: session
  - description: Operations related to rooms api
    name: room
  - description: Operations related to transcode api
    name: transcode
  - description: Operations related to metrics api
    name: metrics
  - description: Operations related to playback api
    name: playback
  - description: Operations related to access control/signing keys api
    name: accessControl
  - description: Operations related to tasks api
    name: task
